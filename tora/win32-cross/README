Hello,

I originally attempted to post this in the tora-develop forums and made a mess with markdown language. Regardless, I was successful in building a working win32 executable using the Mingw32 cross-compiler on Fedora 11.  This executable is very sturdy and performs as well as it's Linux counterpart. I have given many of the features a good workout and have yet to make it crash. Kudos to the TORa and mingw32 developers!  Moreover, it has been distributed to several co-workers and they are pleased that it is more stable than the previous official Windows TORa 2.0 release.  I've worked with this build against the Oracle 9i, 10g and 11g libraries with excellent results.  I'm amazed that this build was possible because my research shows that it is not a good idea to mix libraries build with different compilers especially when using C++.  Therefore, I'm not sure if cross-compiling is always guaranteed to work.

Regardless, below is a how-to should anybody wants try (and improve) this approach.  Also, I'm not an expert in cross-compiling, makefile configuration, C++, etc so there are undoubtedly some redundancies and other silly things in this build process.

Procedure to Cross-Compile TORa on Fedora 11 using Mingw32

STEP 1
1.  Set up Fedora 11 development machine with the mingw32 and wine packages.  I used a VMware virtual machine (F11VM) and a Windows XP VM (XPVM) for testing.

STEP 2
Gather the required Windows packages:
1.  I installed QScintilla-gpl-2.3.2 and instantclient_11_1 on XPVM and copied them over to F11VM.
2.  Also install and build the Linux version of TORa with the Oracle Instant client on VMF11. (More on this below.)

STEP 3
Create *.a library files from the distributed Oracle DLLs.
1.  Download the mingw reimp.exe for Windows (I couldn't find the Linux equivalent). Go to http://us.geocities.com/yongweiwu/dllfaq.htm
2.  Run the prepare-libs.sh script included below.  Copy the resultant *.a files to a directory ($OCILIB) where they will be available for linking (see next step)

STEP 4
Set up the build environment (see build-tora-w32.sh (below) for details):
1.  Set up your directories:  $WIN32_ROOT, $INSTANT_CLIENT_DIR, $OCILIB, $QSCINTILLA_DIR
2.  Obtain a fresh copy of TOra source from SVN and copy to tora.$revision. Update line 34 of build-tora-w32.sh accordingly.
3.  Copy the Linux Tora build of chex to $WIN32_ROOT.
4.  Copy the patches included below to $WIN32_ROOT.
5.  Run the build script.
6.  As root or sudo:  cd tora; make install or run make-tora-install.sh (included below, this was for review and debugging)

STEP 5
Installation of Windows executable. I'm not interested in building a proper installer and instead performed a quick and dirty install.
1.  Copy the qscintilla2.dll found in $QSCINTILLA_DIR/Qt4/release/qscintilla2.dll to the tora release directory (/usr/local/tora-w32, I later renamed to tora for installation)
2.  Copy the mingw32 DLLs libgcc_s_sjlj-1.dll, mingwm10.dll, QtCore4.dll, QtGui4.dll, QtNetwork4.dll, QtSql4.dll found in $QSCINTILLA\_DIR (use find) to the tora release directory.
3.  I copied the instantclient_11_1 folder in the tora-w32 release directory too (You can install this properly and update your Windows environmental variables accordingly.
4.  I copied my tnsnames.ora directory into the tora release directory.
5.  I created tora.bat (see below) in the tora/bin directory and created a shortcut to this. These sets up the Oracle environment. I also attached the nice-looking tora.ico icon to this shortcut.
6.  Copy /usr/local/tora-w32 on F11VM to C:\Program File\tora on XPVM.
7.  Paste the shortcut to either the desktop or quick-launch area in the Windows panel.
8.  Run TORa and enjoy!

Tricks, hacks and kludges
1.  I did *not* change any source code for this build.  All hacks and tweaks were done to facilitate the build process. Again, I am not very familiar with makefiles, autogen, etc.
2.  Building against the actual OCI DDLs was problematic because an exception thrown in the OCI DDL wasn't caught in TORa and the program aborted abnormally.  Therefore, i had to do the procedure described above to create *.a libraries.
3.  Linux chex is used.  (Perhaps the configure process could be tweaked to run chex.exe with wine.)
4.  Patch Makefile.am.patch (see below) moves the Windows file up to the main source directory for inclusion in the build.
5.  Patch oracle.m4.patch (see below) removes clntsh from oracle.m4 so configure won't include it in the Makefile.

To-do
1. Add support for MySQL, PostgreSQL.
2. Tweak configure to create Makefiles that are cross-compile aware so the various patches can be removed and wine used to run chex.exe.
3. Create a proper installation program.


