Installing TOra
===============

Using a binary distribution
===========================

There are a few different distributions available. First lets start with the
similarities. They are all compiled using the following libraries and programs

gcc 2.95.3
stdc++ 2.95.2
Qt 2.3 (Should be binary compatible with 2.2 and above)
Oracle 8.1.7.0.1

The base distribution was Mandrake 7.2. Whatever you use you need a working
Oracle client installation (Even if you go with the static binary). If you
have trouble connecting first make sure sqlplus can connect before trying to
get support for TOra.

tora-{version}-1gc.i686.rpm
---------------------------
This version should work reasonable well on any glibc2.1 based system which
uses GCC 2.95.* or EARLIER. Which means pretty much everyone except RedHat
7.x and Mandrake 8. This version is compiled with KDE support enabled and
requires kdelibs to be installed.

You will probably get a complaint about clntsh.so missing. What you need to
do is make sure that this is the only thing that it complains about and then
install it anyway using the command.

rpm -ivh --nodeps {rpm}

After this you must also make sure ld.so can find the clntsh file which is
in the $ORACLE_HOME/lib directory. You can either add this is /etc/ld.so.conf
or add it in LD_LIBRARY_PATH. This should install tora in /usr/bin.

tora-{version}-1mdk.i686.rpm
----------------------------
This version is excactly the same as the 1gc version mentioned before except
that it will also install tora into the Mandrake menu system. The same library
problems and solutions apply. This version is compiled with KDE support
enabled and requires kdelibs to be installed.

tora-{version}-1qt.i686.rpm
-------------------------------
This version is excactly the same as the 1gc version mentioned before except
that it will also install tora into the Mandrake menu system. The same library
problems and solutions apply. This version is not compiled using KDE support.

tora-{version}-1static.i686.rpm
-------------------------------
This is a statically linked version. The libraries that are linked statically
are stdc++, Qt and Oracle. This means that this version should probably work
on RedHat 7.x and Mandrake 8 as well. This version does not have KDE support
enabled.

tora-{version}-bin.tar.gz
-------------------------
This is a dynamically linked tora which is just to unpack wherever you want
it. To use the SQL templates copy the files in the template directory to
the library /usr/lib/tora. To use help copy the files in the help directory
to the /usr/lib/tora/help directory. This version has KDE support enabled and
requires KDE libraries available.

tora-{version}-qt.tar.gz
-------------------------
This is a dynamically linked tora which is just to unpack wherever you want
it. To use the SQL templates copy the files in the template directory to
the library /usr/lib/tora. To use help copy the files in the help directory
to the /usr/lib/tora/help directory. This version does not have KDE support
enabled.

tora-{version}-static.tar.gz
----------------------------
This is a statically linked tora which you just unpack wherever you want it.
 To use the SQL templates copy the files in the template directory to the
library /usr/lib/tora. To use help copy the files in the help directory
to the /usr/lib/tora/help directory. This version does not have KDE support
enabled.

tora-{version}.zip
------------------
This is a windows installation. It is compiled on Windows 2000 using
Microsoft Visual C++ 6.0 with servicepack 5. It also requires a working
Oracle client installation.

Installing from source
======================

Before you try to compile TOra you will need the following prerequisites:

1. A unix system which supports Qt (Dooh).
2. Qt 2.2 or later.
3. Oracle 8i (Later than Oracle 8.1.5), it might work partially with earlier
   versions of Oracle but is as of this version not supported (Please try and
   send me patches).
4. PERL 5

Thats about it, you should be set to start trying.

There is a configure script available that is made to try to mimic the
behaviour of autoconf generated configure scripts. There is no need to nag
about me starting to use autoconf (See at the end for explanation).

Just issue the command "configure" and it should probably point out if you
need to issue any commands specifying locations of Qt for instance.To find
out about the options type "configure --help". TOra will compile as an KDE
application if KDE is detected by the configure script.

This will generate a Makefile.setup file that you can check if you have
troubles. It will also copy the file Makefile.orig to Makefile so you
can start compiling.

After that you should be able to compile by just issuing "make" followed
by "make install".

If you experience problems with configure
-----------------------------------------

First contact me and let me know what isn't working so I can fix it in the
next version (Henrik Johnson <tora@henrik.org>).

Then copy the file Makefile.setup.orig to Makefile.setup and edit it to
fill out the correct values in it.

Lastly copy the file Makefile.orig to Makefile and you should be set to
continue compiling as normal by "make", "make install".

How to build TOra from source in Windows
----------------------------------------

Since most people will not be interested in building this in Windows you
will be pretty much on your own. If you are interested I can send you my
project files for Visual Studio, email me if you are interested. You might
be able to use the included tora.mak by copying it to this directory, but
I don't use so don't count on it. It was just autogenerated from Visual
Studio. As for the installer stuff I haven't really investigated how that
stuff is saved on the disk, this is my first Windows application so all
of this is new to me. Also I haven't really developed the buildsystem in
windows so you have to use moc and uic by hand (I just copy the files from
Linux myself) when changes to the source files are made.

Why I'm not using autoconf
==========================

Whenever I start out using autoconf in any of my projects I end up spending
more time trying to get autoconf to work instead of time actually spend
getting the configure script to work instead of coding.

People tend to think that autoconf is just a strapon fix all problems
solution to configuring, but this is not the case. Especially if you
need to find Qt (Which I could have just copied), but finding Oracle is
a test I would have had to do myself and I can pretty much garantee it
would have worked worse than this solution does based on my earlier
experiences with autoconf (I'm sure it's ok if you know how to use it,
but I know perl and that works too).

Also I want a few other stuff done when you configure the metacompiling
and dependency generating etc which sets up the makefiles to need as
little work as possible to add new tools or sourcefiles to the project.

/Henrik "Mauritz" Johnson
GlobeCom AB