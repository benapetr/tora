Index: src/core/tomain.cpp
===================================================================
--- src/core/tomain.cpp	(revision 4879)
+++ src/core/tomain.cpp	(working copy)
@@ -463,7 +463,7 @@
     ConnectionSelection->setModel(&toConnectionRegistrySing::Instance());
     //connect(ConnectionSelection, SIGNAL(activated(int)), this, SLOT(connectionSelectionChanged()));
     connect(ConnectionSelection, SIGNAL(currentIndexChanged(QString)), this, SLOT(connectionSelectionChanged()));
-    connect(ConnectionSelection, SIGNAL(currentIndexChanged(int)), &toConnectionRegistrySing::Instance(), SLOT(slotCurrentIndexChanged(int)));
+    connect(ConnectionSelection, SIGNAL(currentIndexChanged(int)), &toConnectionRegistrySing::Instance(), SLOT(slotViewIndexChanged(int)));
 
 
     addToolBarBreak();
Index: src/core/toconnectionregistry.cpp
===================================================================
--- src/core/toconnectionregistry.cpp	(revision 4879)
+++ src/core/toconnectionregistry.cpp	(working copy)
@@ -57,13 +57,13 @@
 	return m_ConnectionsList.empty();
 }
 
-void toConnectionRegistry::changeConnection(const toConnectionOptions &opts)
-{
-	if( m_ConnectionsMap.contains(opts))
-		m_currentConnection = opts;
-	else
-		throw QString("Unregistered connection(change): %1").arg(opts.toString());
-}
+//void toConnectionRegistry::changeConnection(const toConnectionOptions &opts)
+//{
+//	if( m_ConnectionsMap.contains(opts))
+//		m_currentConnection = opts;
+//	else
+//		throw QString("Unregistered connection(change): %1").arg(opts.toString());
+//}
 
 int toConnectionRegistry::rowCount(const QModelIndex &) const
 {
@@ -81,13 +81,16 @@
 		throw QString("Duplicit connection: %1").arg(opsStr);
 	}
 
-	if(m_ConnectionsList.empty())
-		m_currentConnection = conn->connectionOptions();
+	//	if(m_ConnectionsList.empty())
+	//		m_currentConnection = conn->connectionOptions();
 
 	beginInsertRows(QModelIndex(), m_ConnectionsList.size(), m_ConnectionsList.size());
 	m_ConnectionsMap.insert(conn->connectionOptions(), conn);
 	m_ConnectionsList.append(conn);
 	endInsertRows();
+
+	QModelIndex i = index(1);
+	m_currentConnection = index(m_ConnectionsList.size(), 0);
 }
 
 void toConnectionRegistry::removeConnection(toConnection *conn)
@@ -100,13 +103,15 @@
 		conn->setParent(this);
 		throw QString("Unregistered connection for removal: %1").arg(conn->description());
 	}
+
+	int pos = m_ConnectionsList.indexOf(conn);
+
 	// TODO if TCP connection is lost this can hang "forever" - preventing application exit
 	// There must be some ugly way of doing this asynchronously in bg thread:
 	// conn->setParent(NULL); conn->setThread(<something>);
 	// emit something and then wait for threads response
 	delete conn;
 
-	int pos = m_ConnectionsList.indexOf(conn);
 	beginRemoveRows(QModelIndex(), pos, pos);
 	int mRemoved = m_ConnectionsMap.remove(conns.at(0));
 	m_ConnectionsList.removeAt(pos);
@@ -137,30 +142,30 @@
 
 toConnection& toConnectionRegistry::currentConnection()
 {
-	if( m_ConnectionsMap.contains(m_currentConnection))
-		return *m_ConnectionsMap.value(m_currentConnection);
-    throw tr("Can't find active connection");
+	if (m_ConnectionsList.empty())
+		throw tr("Can't find active connection");
+	return *m_ConnectionsList.at(m_currentConnection.row());
 }
 
 toConnection& toConnectionRegistry::connection(const toConnectionOptions &opt)
 {
 	if( m_ConnectionsMap.contains(opt))
 		return *m_ConnectionsMap.value(opt);
-    throw tr("Couldn't find specified connectionts (%1)").arg(opt.toString());
+	throw tr("Couldn't find specified connectionts (%1)").arg(opt.toString());
 }
 
-void toConnectionRegistry::slotCurrentIndexChanged(int idx)
+void toConnectionRegistry::slotViewIndexChanged(int idx)
 {
 	if (idx == -1)
 	{
-		m_currentConnection = s_noConnection;
+		m_currentConnection = QModelIndex();
 		return; // No connection
 	}
 	Q_ASSERT_X(idx < m_ConnectionsList.size(), qPrintable(__QHERE__), qPrintable(QString("Connection index out of range: %1").arg(idx)));
 	QModelIndex i = index(idx, 0);
 	QVariant val = data(i, Qt::UserRole);
 	if (m_ConnectionsMap.contains(val.value<toConnectionOptions>()))
-		m_currentConnection = val.value<toConnectionOptions>();
+		m_currentConnection = i;
 	else
 		throw tr("Can't find active connection");
 }
@@ -170,5 +175,3 @@
     return m_ConnectionsList;
 }
 
-toConnectionOptions toConnectionRegistry::s_noConnection = toConnectionOptions();
-
Index: src/core/toconnectionregistry.h
===================================================================
--- src/core/toconnectionregistry.h	(revision 4879)
+++ src/core/toconnectionregistry.h	(working copy)
@@ -65,7 +65,7 @@
      */
 	// TODO - duno how to implement this
 	// see void toChangeConnection::changeConnection(QAction *act)
-	void changeConnection(const toConnectionOptions &);
+	//void changeConnection(const toConnectionOptions &);
 
     /**
      * Get a list of currently open connections.
@@ -97,13 +97,12 @@
     void activeConnectionChanged(QModelIndex);
 
 private slots:
-    void slotCurrentIndexChanged(int);
+    void slotViewIndexChanged(int);
 
 private:
-    toConnectionOptions m_currentConnection;
+    QModelIndex m_currentConnection;
     QMap<toConnectionOptions, toConnection *> m_ConnectionsMap;
     QList<toConnection *> m_ConnectionsList;
-    static toConnectionOptions s_noConnection;
 };
 
 typedef Loki::SingletonHolder<toConnectionRegistry> toConnectionRegistrySing;
