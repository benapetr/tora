1-loggin:=                                                                                                          <b>See:</b><a href="http://log4plsql.sourceforge.net/">LOG4PLSQL : http://log4plsql.sourceforge.net    </a> 
1-loggin:1.1-initialisation:=<b>Description:                                                                        </b> It is possible to initialize a log context with 1, 2 or 3 parameters. <br><br>1.	The first section (use it for log a code name)<br>2.	A specific log level for this context (use it when you want debug a specific part of you application )<br>3.	A Boolean: TRUE for use a "Log out transactional" features FALSE if not.<br><br>If context is not initialized:<br>·	Section: dynamic pl/plsql call stack<br>·	Level: ERROR<br>·	Log in a transaction <b>See:</b><a href="http://log4plsql.sourceforge.net/">LOG4PLSQL : http://log4plsql.sourceforge.net </a> 
1-loggin:1.1-initialisation:plog.init ;=<b>Description:                                                             </b> A standard<BR><b>Exemple: </b>pCTX PLOG.LOG_CTX := PLOG.init ; \n<BR><BR>  <B>prototype</B>:\nfunction init( pSECTION IN TLOG.LSECTION%type, pLEVEL IN TLOG.LLEVEL%type, pUSE_PIPE IN BOOLEAN) RETURN LOG_CTX;\n\n<BR><b>See:</b><a href="http://log4plsql.sourceforge.net/">LOG4PLSQL : http://log4plsql.sourceforge.net </a> 
1-loggin:1.1-initialisation:plog.init(pSECTION);=<b>Description:                                                    </b> Without default parameter<BR><b>Exemple: </b>pCTX PLOG.LOG_CTX := PLOG.init ('firstSection'); \n<BR><BR><B>prototype</B>:function init( pSECTION IN TLOG.LSECTION%type, pLEVEL IN TLOG.LLEVEL%type, pUSE_PIPE IN BOOLEAN)RETURN LOG_CTX;\n\n<BR><b>See:</b><a href="http://log4plsql.sourceforge.net/">LOG4PLSQL : http://log4plsql.sourceforge.net </a> 
1-loggin:1.1-initialisation:plog.init(pSECTION, pLEVEL);=<b>Description:                                            </b> For debug mode<BR><b>Exemple: </b>pCTX PLOG.LOG_CTX := PLOG.init ('firstSection', PLOG.LDEBUG); \n<BR><BR><B>prototype</B>:function init( pSECTION IN TLOG.LSECTION%type, pLEVEL IN TLOG.LLEVEL%type, pUSE_PIPE IN BOOLEAN)RETURN LOG_CTX;\n\n<BR><b>See:</b><a href="http://log4plsql.sourceforge.net/">LOG4PLSQL : http://log4plsql.sourceforge.net </a> 
1-loggin:1.1-initialisation:plog.init(pSECTION, pLEVEL, TRUE|FALSE);=<b>Description:                                </b> for "Log out transactional" features<BR><b>Exemple: </b>pCTX PLOG.LOG_CTX := PLOG.init ('firstSection', PLOG.LDEBUG, FALSE);\n<BR><BR><B>prototype</B>:function init( pSECTION IN TLOG.LSECTION%type, pLEVEL IN TLOG.LLEVEL%type, pUSE_PIPE IN BOOLEAN)RETURN LOG_CTX;\n\n\n<BR><b>See:</b><a href="http://log4plsql.sourceforge.net/">LOG4PLSQL : http://log4plsql.sourceforge.net </a> 
1-loggin:1.2-use:=<b>Description:                                                                                   </b> <b>LOG4PLSQL log level</b><br><br><br>plog.error('Text');&nbsp;&nbsp;LERROR&nbsp;&nbsp;The ERROR level designates error events that might still allow the application to continue running.<br>plog.warn ('Text');&nbsp;&nbsp;LWARN&nbsp;&nbsp;The WARN level designates potentially harmful situations<br>plog.info ('Text');&nbsp;&nbsp;LINFO&nbsp;&nbsp;The INFO level designates informational messages that highlight the progress of the application at coarse-grained level.<br>plog.debug('Text');&nbsp;&nbsp;LDEBUG&nbsp;&nbsp;The DEBUG Level designates fine-grained informational events that are most useful to debug an application.<br>Note: error>warn>info>debug<br><br><br><b>See:</b><a href="http://log4plsql.sourceforge.net/">LOG4PLSQL : http://log4plsql.sourceforge.net </a> 
1-loggin:1.2-use:plog.error('Log Text');=<b>Description:                                                            </b> The ERROR level designates error events that might still allow the application to continue running.\n<BR><b>Exemple:plog.error('Text');</b> \n<BR><B>prototype</B>:procedure error( pTEXTE IN TLOG.LTEXTE%type);\n\n<BR><b>See:</b><a href="http://log4plsql.sourceforge.net/">LOG4PLSQL : http://log4plsql.sourceforge.net </a> 
1-loggin:1.2-use:plog.error(pCTX, 'Log Text');=<b>Description:                                                      </b> The ERROR level designates error events that might still allow the application to continue running.\n<BR><b>Exemple:plog.error(pCTX, 'Text');</b> \n<BR><B>prototype</B>:procedure error( pCTX IN OUT NOCOPY LOG_CTX, pTEXTE IN TLOG.LTEXTE%type);\n\n<BR><b>See:</b><a href="http://log4plsql.sourceforge.net/">LOG4PLSQL : http://log4plsql.sourceforge.net </a> 
1-loggin:1.2-use:plog.warn('Log Text');=<b>Description:                                                             </b> The WARN level designates potentially harmful situations\n<BR><b>Exemple:</b> plog.warn('Text');\n<BR><B>prototype</B>:procedure warn( pTEXTE IN TLOG.LTEXTE%type);\n\n<BR><b>See:</b><a href="http://log4plsql.sourceforge.net/">LOG4PLSQL : http://log4plsql.sourceforge.net </a> 
1-loggin:1.2-use:plog.warn(pCTX, 'Log Text');=<b>Description:                                                       </b> The WARN level designates potentially harmful situations\n<BR><b>Exemple:</b> plog.warn(pCTX, 'Text');\n<BR><B>prototype</B>:procedure warn( pCTX IN OUT NOCOPY LOG_CTX, pTEXTE IN TLOG.LTEXTE%type);\n\n<BR><b>See:</b><a href="http://log4plsql.sourceforge.net/">LOG4PLSQL : http://log4plsql.sourceforge.net </a> 
1-loggin:1.2-use:plog.info('Log Text');=<b>Description:                                                             </b> The INFO level designates informational messages that highlight the progress of the application at coarse-grained level.\n<BR><b>Exemple:</b> plog.info('Text');\n<BR><B>prototype</B>:procedure info( pTEXTE IN TLOG.LTEXTE%type);\n\n\n<BR><b>See:</b><a href="http://log4plsql.sourceforge.net/">LOG4PLSQL : http://log4plsql.sourceforge.net </a> 
1-loggin:1.2-use:plog.info(pCTX, 'Log Text');=<b>Description:                                                       </b> The INFO level designates informational messages that highlight the progress of the application at coarse-grained level.\n<BR><b>Exemple:</b> plog.info(pCTX, 'Text');\n<BR><B>prototype</B>:procedure info( pCTX IN OUT NOCOPY LOG_CTX, pTEXTE IN TLOG.LTEXTE%type);\n\n<BR><b>See:</b><a href="http://log4plsql.sourceforge.net/">LOG4PLSQL : http://log4plsql.sourceforge.net </a> 
1-loggin:1.2-use:plog.debug('Log Text');=<b>Description:                                                            </b> The DEBUG Level designates fine-grained informational events that are most useful to debug an application.\n<BR><b>Exemple:</b> plog.debug('Text');\n<BR><B>prototype</B>:procedure debug( pTEXTE IN TLOG.LTEXTE%type);\n\n<BR><b>See:</b><a href="http://log4plsql.sourceforge.net/">LOG4PLSQL : http://log4plsql.sourceforge.net </a> 
1-loggin:1.2-use:plog.debug(pCTX, 'Log Text');=<b>Description:                                                      </b> The DEBUG Level designates fine-grained informational events that are most useful to debug an application.\n<BR><b>Exemple:</b> plog.debug(pCTX, 'Text');\n<BR><B>prototype</B>:procedure debug( pCTX IN OUT NOCOPY LOG_CTX, pTEXTE IN TLOG.LTEXTE%type);\n\n<BR><b>See:</b><a href="http://log4plsql.sourceforge.net/">LOG4PLSQL : http://log4plsql.sourceforge.net </a> 
1-loggin:1.3-Dynamique Parameter:=<b>See:</b><a href="http://log4plsql.sourceforge.net/">LOG4PLSQL : http://log4plsql.sourceforge.net </a> 
1-loggin:1.3-Dynamique Parameter:Level Management:=It is possible to dynamically increase with setLevel the level of log. A call to setLevel without parameter repositions the levels has that specified in the package.<br><b>See:</b><a href="http://log4plsql.sourceforge.net/">LOG4PLSQL : http://log4plsql.sourceforge.net </a> 
1-loggin:1.3-Dynamique Parameter:Level Management:plog.getLevel(pCTX);=<b>Description:                              </b> return a level.\n<BR><b>Exemple:</b> PLOG.getLevel(pCTX);\n<BR><B>prototype</B>:function getLevel( pCTX IN OUT NOCOPY LOG_CTX);\n\n<BR><b>See:</b><a href="http://log4plsql.sourceforge.net/">LOG4PLSQL : http://log4plsql.sourceforge.net </a> 
1-loggin:1.3-Dynamique Parameter:Level Management:plog.setLevel(pCTX, PLOG.LLEVEL);=<b>Description:                 </b> increase a current level, it nice for debug a code part.\n<BR><b>Exemple:</b> PLOG.setLevel (pCTX, PLOG.LDEBUG);\n<BR><B>prototype</B>:procedure setLevel( pCTX IN OUT NOCOPY LOG_CTX, pLEVEL IN TLOG.LLEVEL%type);\n\n<BR><b>See:</b><a href="http://log4plsql.sourceforge.net/">LOG4PLSQL : http://log4plsql.sourceforge.net </a> 
1-loggin:1.3-Dynamique Parameter:Section Management:=By default a section is a PL/SQL call stack. By is possible to specify a hierarchical log node.<br><b>See:</b><a href="http://log4plsql.sourceforge.net/">LOG4PLSQL : http://log4plsql.sourceforge.net </a> 
1-loggin:1.3-Dynamique Parameter:Section Management:plog.getSection(pCTX);=<b>Description:                          </b>  Retrun a section string.\n<BR><b>Exemple:</b> PLOG.getSection(pCTX);\n<BR><B>prototype</B>:function getSection( pCTX IN OUT NOCOPY LOG_CTX);\n\n\n<BR><b>See:</b><a href="http://log4plsql.sourceforge.net/">LOG4PLSQL : http://log4plsql.sourceforge.net </a> 
1-loggin:1.3-Dynamique Parameter:Section Management:plog.setBeginSection(pCTX, 'NewSubSectionName');=<b>Description:</b> for create a new node in hierarchy.\n<BR><b>Exemple:</b>  PLOG.SetBeginSection (pCTX, 'Test1');\n<BR><B>prototype</B>:procedure setBeginSection( pCTX IN OUT NOCOPY LOG_CTX, pSECTION IN TLOG.LSECTION%type);\n\n\n<BR><b>See:</b><a href="http://log4plsql.sourceforge.net/">LOG4PLSQL : http://log4plsql.sourceforge.net </a> 
1-loggin:1.3-Dynamique Parameter:Section Management:plog.setEndSection(pCTX, 'EndEDSubSectionName')=<b>Description: </b> for close a node in hierarchy.\n<BR><b>Exemple:</b> PLOG.SetEndSection (pCTX, 'Test1');\n<BR><B>prototype</B>:procedure setEndSection( pCTX IN OUT NOCOPY LOG_CTX, pSECTION IN TLOG.LSECTION%type);\n\n\n<BR><b>See:</b><a href="http://log4plsql.sourceforge.net/">LOG4PLSQL : http://log4plsql.sourceforge.net </a> 
1-loggin:1.3-Dynamique Parameter:Transaction Management:=Log in transaction have some problems:<BR>-	If you rollback a transaction you log message is rollback in same time<BR>-	If you code is very long operation isn't possible to view a progression.<BR><BR>LOG4PLSQL have features that bypass a transactional problem. This features use a DBMS_PIPE oracle package for logging a message.<b>See:</b><a href="http://log4plsql.sourceforge.net/">LOG4PLSQL : http://log4plsql.sourceforge.net </a> 
1-loggin:1.3-Dynamique Parameter:Transaction Management:plog.getTransactionMode(pCTX);=<b>Description:              </b> return a Boolean TRUE if your use "Log out transactional" features FALSE if not. \n<BR><b>Exemple:</b> PLOG.getTransactionMode(pCTX);\n<BR><B>prototype</B>:function getTransactionMode( pCTX IN OUT NOCOPY LOG_CTX);\n\n\n<BR><b>See:</b><a href="http://log4plsql.sourceforge.net/">LOG4PLSQL : http://log4plsql.sourceforge.net </a> 
1-loggin:1.3-Dynamique Parameter:Transaction Management:plog.setTransactionMode(pCTX, TRUE|FALSE);=<b>Description:  </b> For set transactional mode (TRUE: Log out transactional, FALSE: Log in transaction).\n<BR><b>Exemple:</b> PLOG.setTransactionMode(pCTX,FALSE);\n<BR><B>prototype</B>:procedure setTransactionMode( pCTX IN OUT NOCOPY LOG_CTX, inTransaction IN boolean);\n\n\n<BR><b>See:</b><a href="http://log4plsql.sourceforge.net/">LOG4PLSQL : http://log4plsql.sourceforge.net </a> 
2-administration:=<b>See:</b><a href="http://log4plsql.sourceforge.net/">LOG4PLSQL : http://log4plsql.sourceforge.net </a> 
2-administration:background process:=<b>See:</b><a href="http://log4plsql.sourceforge.net/">LOG4PLSQL : http://log4plsql.sourceforge.net </a> 
2-administration:background process:plog.background_Log;=<b>Description:                                            </b> Start a pl/sql background_Log.\n<BR><b>Exemple:</b> exec plog.background_Log;\n<BR><B>prototype</B>:procedure background_Log( timeout IN INTEGER);\n\n<BR><b>See:</b><a href="http://log4plsql.sourceforge.net/">LOG4PLSQL : http://log4plsql.sourceforge.net </a> 
2-administration:background process:plog.background_Log_stop;=<b>Description:                                       </b> Stop a pl/sql backgroud_Log.\n<BR><b>Exemple:</b> exec PLOG.background_Log_stop;\n<BR><B>prototype</B>:procedure background_Log_stop;\n\n\n<BR><b>See:</b><a href="http://log4plsql.sourceforge.net/">LOG4PLSQL : http://log4plsql.sourceforge.net </a> 
2-administration:purge:=Clean database log table<BR><b>See:</b><a href="http://log4plsql.sourceforge.net/">LOG4PLSQL : http://log4plsql.sourceforge.net </a> 
2-administration:purge:plog.purge=<b>Description:                                                                   </b> \n<BR><b>Exemple:</b> PLOG.purge ;\n<BR><B>prototype</B>:procedure purge\n\n<BR><b>See:</b><a href="http://log4plsql.sourceforge.net/">LOG4PLSQL : http://log4plsql.sourceforge.net </a> 
2-administration:purge:plog.purge(pCTX );=<b>Description:                                                           </b> \n<BR><b>Exemple:</b> PLOG.purge (pCTX);\n<BR><B>prototype</B>:procedure purge( pCTX IN OUT NOCOPY LOG_CTX);\n\n\n<BR><b>See:</b><a href="http://log4plsql.sourceforge.net/">LOG4PLSQL : http://log4plsql.sourceforge.net </a> 
2-administration:purge:plog.purge(pCTX, TheDate );=<b>Description:                                                  </b> delete a last week log \n<BR><b>Exemple:</b> PLOG.purge (pCTX, sysdate - 7 );\n<BR><B>prototype</B>:procedure purge( pCTX IN OUT NOCOPY LOG_CTX, theDate DATE);\n\n\n<BR><b>See:</b><a href="http://log4plsql.sourceforge.net/">LOG4PLSQL : http://log4plsql.sourceforge.net </a> 
