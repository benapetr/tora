/** \file
 *  This C header file was generated by $ANTLR version 3.3 Nov 30, 2010 12:50:56
 *
 *     -  From the grammar source file : OraclePLSQL.g
 *     -                            On : 2011-09-03 01:17:56
 *     -                 for the lexer : OraclePLSQLLexerLexer *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The lexer OraclePLSQLLexer has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 * 
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pOraclePLSQLLexer, which is returned from a call to OraclePLSQLLexerNew().
 *
 * As this is a generated lexer, it is unlikely you will call it 'manually'. However
 * the methods are provided anyway.
 * * The methods in pOraclePLSQLLexer are  as follows:
 *
 *  -  void      pOraclePLSQLLexer->T_UNKNOWN(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T_RESERVED(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T_SCHEMA_NAME(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T_TRIGGER_NAME(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T_PACKAGE_NAME(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T_FUNCTION_NAME(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T_PROCEDURE_NAME(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T_PARAMETER_NAME(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T_BINDVAR_NAME(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T_VARIABLE_NAME(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T_DATATYPE_NAME(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T_CURSOR_NAME(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T_TABLE_NAME(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T_COLUMN_NAME(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T_OBJECT_NAME(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T_LABEL_NAME(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T_EXCEPTION_NAME(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T_DBLINK_NAME(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T_DECL(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T_USE(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T_USEL(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T_TYPE_DECL(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T_SUBTYPE_DECL(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T_CURSOR_DECL(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T_VAR_DECL(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T_CONST_DECL(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T_EXC_DECL(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T_FUNCTION_DECL(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T_PROCEDURE_DECL(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T_PRAGMA_DECL(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T_DECL_BLOCK(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T_BLOCK_BLOCK(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T_PROCEDURE_BLOCK(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T_FUNCTION_BLOCK(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T_DECLARE_BLOCK(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T_BEGIN_BLOCK(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T_EXCEPTIONS_BLOCK(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T_COMMIT(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T_DELETE(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T_INSERT(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T_LOCK_TABLE(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T_MERGE(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T_ROLLBACK(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T_SAVEPOINT(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T_SELECT(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T_SET_TRANSACTION(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T_UPDATE(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T_EXECUTE_IMMEDIATE(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T_CASE(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T_OPEN(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T_CLOSE(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T_CONTINUE(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T_PIPE(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T_GOTO(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T_EXIT(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T_RETURN(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T_DECLARE(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T_RAISE(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T_FETCH(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T_LOOP(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T_WHILE(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T_NULL_STAT(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T_FOR(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T_FORALL(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T_IF(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T_ELSIF(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T_ELSE(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T_ENDIF(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T_ASSIGN(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T_CALL(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T_DECLARATION(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T_STATEMENT(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__126(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__127(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__128(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__129(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__130(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__131(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__132(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__133(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__134(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__135(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__136(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__137(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__138(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__139(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__140(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__141(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__142(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__143(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__144(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__145(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__146(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__147(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__148(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__149(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__150(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__151(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__152(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__153(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__154(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__155(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__156(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__157(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__158(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__159(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__160(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__161(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__162(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__163(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__164(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__165(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__166(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__167(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__168(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__169(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__170(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__171(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__172(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__173(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__174(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__175(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__176(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__177(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__178(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__179(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__180(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__181(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__182(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__183(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__184(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__185(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__186(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__187(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__188(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__189(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__190(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__191(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__192(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__193(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__194(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__195(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__196(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__197(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__198(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__199(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__200(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__201(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__202(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__203(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__204(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__205(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__206(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__207(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__208(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__209(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__210(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__211(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__212(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__213(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__214(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__215(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__216(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__217(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__218(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__219(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__220(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__221(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__222(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__223(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__224(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__225(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__226(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__227(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__228(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__229(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__230(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__231(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__232(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__233(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__234(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__235(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__236(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__237(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__238(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__239(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__240(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__241(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__242(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->T__243(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->K_IN(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->K_OUT(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->K_USING(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->QUOTED_STRING(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->QSTRING(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->QS_ANGLE(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->QS_BRACE(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->QS_BRACK(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->QS_PAREN(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->QS_OTHER_CH(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->QS_OTHER(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->BINDVAR(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->ID(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->SEMI(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->COLON(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->DOUBLEDOT(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->DOT(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->POINT(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->COMMA(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->ASTERISK(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->AT_SIGN(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->RPAREN(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->LPAREN(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->RBRACK(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->LBRACK(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->PLUS(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->MINUS(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->DIVIDE(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->EQ(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->PERCENT(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->LLABEL(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->RLABEL(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->ASSIGN(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->ARROW(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->VERTBAR(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->DOUBLEVERTBAR(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->NOT_EQ(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->LTH(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->LEQ(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->GTH(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->GEQ(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->INTEGER(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->REAL_NUMBER(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->NUMBER_VALUE(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->NUM(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->QUOTE(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->DOUBLEQUOTED_STRING(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->WS(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->SL_COMMENT(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->ML_COMMENT(pOraclePLSQLLexer)
 *  -  void      pOraclePLSQLLexer->Tokens(pOraclePLSQLLexer)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_OraclePLSQLLexer_H
#define _OraclePLSQLLexer_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

#include "macros.h"
#include "error_handler.h"

 
#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct OraclePLSQLLexer_Ctx_struct OraclePLSQLLexer, * pOraclePLSQLLexer;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule 
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/** Context tracking structure for OraclePLSQLLexer
 */
struct OraclePLSQLLexer_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_LEXER    pLexer;


     void (*mT_UNKNOWN)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT_RESERVED)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT_SCHEMA_NAME)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT_TRIGGER_NAME)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT_PACKAGE_NAME)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT_FUNCTION_NAME)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT_PROCEDURE_NAME)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT_PARAMETER_NAME)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT_BINDVAR_NAME)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT_VARIABLE_NAME)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT_DATATYPE_NAME)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT_CURSOR_NAME)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT_TABLE_NAME)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT_COLUMN_NAME)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT_OBJECT_NAME)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT_LABEL_NAME)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT_EXCEPTION_NAME)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT_DBLINK_NAME)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT_DECL)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT_USE)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT_USEL)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT_TYPE_DECL)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT_SUBTYPE_DECL)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT_CURSOR_DECL)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT_VAR_DECL)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT_CONST_DECL)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT_EXC_DECL)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT_FUNCTION_DECL)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT_PROCEDURE_DECL)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT_PRAGMA_DECL)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT_DECL_BLOCK)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT_BLOCK_BLOCK)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT_PROCEDURE_BLOCK)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT_FUNCTION_BLOCK)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT_DECLARE_BLOCK)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT_BEGIN_BLOCK)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT_EXCEPTIONS_BLOCK)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT_COMMIT)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT_DELETE)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT_INSERT)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT_LOCK_TABLE)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT_MERGE)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT_ROLLBACK)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT_SAVEPOINT)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT_SELECT)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT_SET_TRANSACTION)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT_UPDATE)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT_EXECUTE_IMMEDIATE)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT_CASE)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT_OPEN)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT_CLOSE)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT_CONTINUE)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT_PIPE)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT_GOTO)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT_EXIT)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT_RETURN)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT_DECLARE)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT_RAISE)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT_FETCH)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT_LOOP)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT_WHILE)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT_NULL_STAT)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT_FOR)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT_FORALL)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT_IF)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT_ELSIF)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT_ELSE)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT_ENDIF)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT_ASSIGN)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT_CALL)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT_DECLARATION)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT_STATEMENT)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__126)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__127)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__128)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__129)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__130)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__131)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__132)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__133)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__134)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__135)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__136)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__137)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__138)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__139)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__140)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__141)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__142)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__143)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__144)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__145)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__146)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__147)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__148)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__149)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__150)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__151)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__152)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__153)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__154)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__155)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__156)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__157)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__158)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__159)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__160)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__161)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__162)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__163)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__164)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__165)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__166)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__167)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__168)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__169)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__170)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__171)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__172)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__173)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__174)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__175)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__176)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__177)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__178)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__179)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__180)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__181)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__182)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__183)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__184)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__185)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__186)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__187)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__188)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__189)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__190)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__191)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__192)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__193)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__194)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__195)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__196)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__197)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__198)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__199)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__200)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__201)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__202)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__203)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__204)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__205)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__206)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__207)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__208)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__209)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__210)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__211)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__212)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__213)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__214)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__215)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__216)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__217)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__218)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__219)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__220)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__221)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__222)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__223)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__224)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__225)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__226)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__227)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__228)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__229)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__230)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__231)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__232)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__233)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__234)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__235)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__236)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__237)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__238)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__239)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__240)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__241)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__242)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mT__243)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mK_IN)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mK_OUT)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mK_USING)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mQUOTED_STRING)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mQSTRING)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mQS_ANGLE)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mQS_BRACE)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mQS_BRACK)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mQS_PAREN)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mQS_OTHER_CH)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mQS_OTHER)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mBINDVAR)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mID)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mSEMI)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mCOLON)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mDOUBLEDOT)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mDOT)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mPOINT)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mCOMMA)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mASTERISK)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mAT_SIGN)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mRPAREN)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mLPAREN)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mRBRACK)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mLBRACK)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mPLUS)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mMINUS)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mDIVIDE)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mEQ)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mPERCENT)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mLLABEL)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mRLABEL)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mASSIGN)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mARROW)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mVERTBAR)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mDOUBLEVERTBAR)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mNOT_EQ)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mLTH)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mLEQ)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mGTH)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mGEQ)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mINTEGER)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mREAL_NUMBER)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mNUMBER_VALUE)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mNUM)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mQUOTE)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mDOUBLEQUOTED_STRING)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mWS)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mSL_COMMENT)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mML_COMMENT)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
     void (*mTokens)	(struct OraclePLSQLLexer_Ctx_struct * ctx);
    const char * (*getGrammarFileName)();
    void            (*reset)  (struct OraclePLSQLLexer_Ctx_struct * ctx);
    void	    (*free)   (struct OraclePLSQLLexer_Ctx_struct * ctx);
        
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pOraclePLSQLLexer OraclePLSQLLexerNew         (pANTLR3_INPUT_STREAM instream);
ANTLR3_API pOraclePLSQLLexer OraclePLSQLLexerNewSSD      (pANTLR3_INPUT_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the lexer will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif 
#define EOF      -1
#define T__126      126
#define T__127      127
#define T__128      128
#define T__129      129
#define T__130      130
#define T__131      131
#define T__132      132
#define T__133      133
#define T__134      134
#define T__135      135
#define T__136      136
#define T__137      137
#define T__138      138
#define T__139      139
#define T__140      140
#define T__141      141
#define T__142      142
#define T__143      143
#define T__144      144
#define T__145      145
#define T__146      146
#define T__147      147
#define T__148      148
#define T__149      149
#define T__150      150
#define T__151      151
#define T__152      152
#define T__153      153
#define T__154      154
#define T__155      155
#define T__156      156
#define T__157      157
#define T__158      158
#define T__159      159
#define T__160      160
#define T__161      161
#define T__162      162
#define T__163      163
#define T__164      164
#define T__165      165
#define T__166      166
#define T__167      167
#define T__168      168
#define T__169      169
#define T__170      170
#define T__171      171
#define T__172      172
#define T__173      173
#define T__174      174
#define T__175      175
#define T__176      176
#define T__177      177
#define T__178      178
#define T__179      179
#define T__180      180
#define T__181      181
#define T__182      182
#define T__183      183
#define T__184      184
#define T__185      185
#define T__186      186
#define T__187      187
#define T__188      188
#define T__189      189
#define T__190      190
#define T__191      191
#define T__192      192
#define T__193      193
#define T__194      194
#define T__195      195
#define T__196      196
#define T__197      197
#define T__198      198
#define T__199      199
#define T__200      200
#define T__201      201
#define T__202      202
#define T__203      203
#define T__204      204
#define T__205      205
#define T__206      206
#define T__207      207
#define T__208      208
#define T__209      209
#define T__210      210
#define T__211      211
#define T__212      212
#define T__213      213
#define T__214      214
#define T__215      215
#define T__216      216
#define T__217      217
#define T__218      218
#define T__219      219
#define T__220      220
#define T__221      221
#define T__222      222
#define T__223      223
#define T__224      224
#define T__225      225
#define T__226      226
#define T__227      227
#define T__228      228
#define T__229      229
#define T__230      230
#define T__231      231
#define T__232      232
#define T__233      233
#define T__234      234
#define T__235      235
#define T__236      236
#define T__237      237
#define T__238      238
#define T__239      239
#define T__240      240
#define T__241      241
#define T__242      242
#define T__243      243
#define T_UNKNOWN      4
#define T_RESERVED      5
#define T_SCHEMA_NAME      6
#define T_TRIGGER_NAME      7
#define T_PACKAGE_NAME      8
#define T_FUNCTION_NAME      9
#define T_PROCEDURE_NAME      10
#define T_PARAMETER_NAME      11
#define T_BINDVAR_NAME      12
#define T_VARIABLE_NAME      13
#define T_DATATYPE_NAME      14
#define T_CURSOR_NAME      15
#define T_TABLE_NAME      16
#define T_COLUMN_NAME      17
#define T_OBJECT_NAME      18
#define T_LABEL_NAME      19
#define T_EXCEPTION_NAME      20
#define T_DBLINK_NAME      21
#define T_DECL      22
#define T_USE      23
#define T_USEL      24
#define T_TYPE_DECL      25
#define T_SUBTYPE_DECL      26
#define T_CURSOR_DECL      27
#define T_VAR_DECL      28
#define T_CONST_DECL      29
#define T_EXC_DECL      30
#define T_FUNCTION_DECL      31
#define T_PROCEDURE_DECL      32
#define T_PRAGMA_DECL      33
#define T_DECL_BLOCK      34
#define T_BLOCK_BLOCK      35
#define T_PROCEDURE_BLOCK      36
#define T_FUNCTION_BLOCK      37
#define T_DECLARE_BLOCK      38
#define T_BEGIN_BLOCK      39
#define T_EXCEPTIONS_BLOCK      40
#define T_COMMIT      41
#define T_DELETE      42
#define T_INSERT      43
#define T_LOCK_TABLE      44
#define T_MERGE      45
#define T_ROLLBACK      46
#define T_SAVEPOINT      47
#define T_SELECT      48
#define T_SET_TRANSACTION      49
#define T_UPDATE      50
#define T_EXECUTE_IMMEDIATE      51
#define T_CASE      52
#define T_OPEN      53
#define T_CLOSE      54
#define T_CONTINUE      55
#define T_PIPE      56
#define T_GOTO      57
#define T_EXIT      58
#define T_RETURN      59
#define T_DECLARE      60
#define T_RAISE      61
#define T_FETCH      62
#define T_LOOP      63
#define T_WHILE      64
#define T_NULL_STAT      65
#define T_FOR      66
#define T_FORALL      67
#define T_IF      68
#define T_ELSIF      69
#define T_ELSE      70
#define T_ENDIF      71
#define T_ASSIGN      72
#define T_CALL      73
#define T_DECLARATION      74
#define T_STATEMENT      75
#define DIVIDE      76
#define SEMI      77
#define LPAREN      78
#define COMMA      79
#define RPAREN      80
#define K_IN      81
#define K_OUT      82
#define ASSIGN      83
#define ID      84
#define INTEGER      85
#define DOT      86
#define K_USING      87
#define DOUBLEDOT      88
#define LLABEL      89
#define RLABEL      90
#define COLON      91
#define AT_SIGN      92
#define EQ      93
#define LTH      94
#define GTH      95
#define MINUS      96
#define PLUS      97
#define DOUBLEVERTBAR      98
#define ASTERISK      99
#define REAL_NUMBER      100
#define QUOTED_STRING      101
#define ARROW      102
#define QSTRING      103
#define QS_ANGLE      104
#define QS_BRACE      105
#define QS_BRACK      106
#define QS_PAREN      107
#define QS_OTHER      108
#define QUOTE      109
#define QS_OTHER_CH      110
#define BINDVAR      111
#define DOUBLEQUOTED_STRING      112
#define NUM      113
#define POINT      114
#define RBRACK      115
#define LBRACK      116
#define PERCENT      117
#define VERTBAR      118
#define NOT_EQ      119
#define LEQ      120
#define GEQ      121
#define NUMBER_VALUE      122
#define WS      123
#define SL_COMMENT      124
#define ML_COMMENT      125
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for OraclePLSQLLexer
 * =============================================================================
 */
/** \} */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
