/** \file
 *  This C header file was generated by $ANTLR version 3.3 Nov 30, 2010 12:50:56
 *
 *     -  From the grammar source file : OracleSQL.g
 *     -                            On : 2011-08-13 01:59:58
 *     -                 for the lexer : OracleSQLLexerLexer *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The lexer OracleSQLLexer has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 * 
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pOracleSQLLexer, which is returned from a call to OracleSQLLexerNew().
 *
 * As this is a generated lexer, it is unlikely you will call it 'manually'. However
 * the methods are provided anyway.
 * * The methods in pOracleSQLLexer are  as follows:
 *
 *  -  void      pOracleSQLLexer->T_UNKNOWN(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T_RESERVED(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T_TABLE_ALIAS(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T_COLUMN_ALIAS(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T_COLUMN_NAME(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T_TABLE_NAME(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T_SCHEMA_NAME(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T_FUNCTION_NAME(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T_PACKAGE_NAME(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T_DBLINK_NAME(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T_BINDVAR_NAME(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T_DECL(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T_USE(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T_IDENTIFIER(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T_TABLE_REF(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T_WITH(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T_SELECT(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T_SUBQUERY(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T_TABLE_CAST(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T_COLUMN_LIST(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T_SELECT_COLUMN(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T_FROM(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T_WHERE(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T_HIERARCHICAL(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T_GROUP_BY(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T_MODEL(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T_UNION(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T_ORDER_BY_CLAUSE(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T_FOR_UPDATE_CLAUSE(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T_JOINING_CLAUSE(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T_OPERATOR_UNARY(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T_OPERATOR_BINARY(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T_OPERATOR_PART(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T_COND_OR(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T_COND_OR_SEQ(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T_COND_AND(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T_COND_AND_SEQ(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T_COND_NOT(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T_COND_EXISTS(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T_COND_IS(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T_COND_COMPARISON(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T_COND_GROUP_COMPARISON(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T_COND_IN(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T_COND_IS_A_SET(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T_COND_IS_ANY(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T_COND_IS_EMPTY(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T_COND_IS_OF_TYPE(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T_COND_IS_PRESENT(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T_COND_LIKE(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T_COND_MEMEBER(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T_COND_BETWEEN(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T_COND_REGEXP_LIKE(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T_COND_SUBMULTISET(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T_COND_EQUALS_PATH(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T_COND_UNDER_PATH(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T_COND_PAREN(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__114(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__115(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__116(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__117(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__118(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__119(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__120(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__121(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__122(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__123(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__124(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__125(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__126(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__127(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__128(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__129(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__130(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__131(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__132(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__133(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__134(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__135(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__136(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__137(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__138(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__139(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__140(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__141(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__142(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__143(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__144(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__145(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__146(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__147(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__148(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__149(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__150(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__151(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__152(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__153(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__154(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__155(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__156(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__157(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__158(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__159(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__160(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__161(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__162(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__163(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__164(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__165(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__166(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__167(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__168(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__169(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__170(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__171(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__172(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__173(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__174(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__175(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__176(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__177(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__178(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__179(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__180(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__181(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__182(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__183(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__184(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__185(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__186(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__187(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__188(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__189(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__190(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__191(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__192(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__193(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__194(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__195(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__196(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__197(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__198(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__199(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__200(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__201(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__202(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__203(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__204(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__205(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__206(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__207(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__208(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__209(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__210(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__211(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__212(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__213(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__214(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__215(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__216(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__217(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__218(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__219(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__220(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__221(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__222(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__223(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__224(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__225(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__226(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__227(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__228(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__229(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__230(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__231(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__232(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__233(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__234(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__235(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__236(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__237(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__238(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__239(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__240(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__241(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__242(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__243(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__244(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__245(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__246(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__247(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__248(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__249(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__250(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__251(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__252(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__253(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__254(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__255(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__256(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__257(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__258(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__259(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__260(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__261(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__262(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__263(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__264(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__265(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__266(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__267(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__268(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__269(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__270(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__271(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__272(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__273(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__274(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__275(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__276(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__277(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__278(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__279(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__280(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__281(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__282(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__283(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__284(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->T__285(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->QUOTED_STRING(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->QSTRING(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->QS_ANGLE(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->QS_BRACE(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->QS_BRACK(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->QS_PAREN(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->QS_OTHER_CH(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->QS_OTHER(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->BINDVAR(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->ID(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->SEMI(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->COLON(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->DOUBLEDOT(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->DOT(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->POINT(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->COMMA(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->ASTERISK(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->AT_SIGN(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->RPAREN(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->LPAREN(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->RBRACK(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->LBRACK(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->PLUS(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->MINUS(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->DIVIDE(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->EQ(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->PERCENTAGE(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->LLABEL(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->RLABEL(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->ASSIGN(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->ARROW(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->VERTBAR(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->DOUBLEVERTBAR(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->NOT_EQ(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->LTH(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->LEQ(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->GTH(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->GEQ(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->NUMBER(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->NUM(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->QUOTE(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->DOUBLEQUOTED_STRING(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->WS(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->SL_COMMENT(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->ML_COMMENT(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->TYPE_ATTR(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->ROWTYPE_ATTR(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->NOTFOUND_ATTR(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->FOUND_ATTR(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->ISOPEN_ATTR(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->ROWCOUNT_ATTR(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->BULK_ROWCOUNT_ATTR(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->CHARSET_ATTR(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->ZV(pOracleSQLLexer)
 *  -  void      pOracleSQLLexer->Tokens(pOracleSQLLexer)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_OracleSQLLexer_H
#define _OracleSQLLexer_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

#include "macros.h"
#include "error_handler.h"

 
#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct OracleSQLLexer_Ctx_struct OracleSQLLexer, * pOracleSQLLexer;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule 
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/* ========================
 * BACKTRACKING IS ENABLED
 * ========================
 */

/** Context tracking structure for OracleSQLLexer
 */
struct OracleSQLLexer_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_LEXER    pLexer;


     void (*mT_UNKNOWN)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT_RESERVED)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT_TABLE_ALIAS)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT_COLUMN_ALIAS)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT_COLUMN_NAME)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT_TABLE_NAME)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT_SCHEMA_NAME)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT_FUNCTION_NAME)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT_PACKAGE_NAME)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT_DBLINK_NAME)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT_BINDVAR_NAME)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT_DECL)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT_USE)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT_IDENTIFIER)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT_TABLE_REF)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT_WITH)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT_SELECT)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT_SUBQUERY)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT_TABLE_CAST)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT_COLUMN_LIST)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT_SELECT_COLUMN)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT_FROM)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT_WHERE)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT_HIERARCHICAL)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT_GROUP_BY)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT_MODEL)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT_UNION)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT_ORDER_BY_CLAUSE)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT_FOR_UPDATE_CLAUSE)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT_JOINING_CLAUSE)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT_OPERATOR_UNARY)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT_OPERATOR_BINARY)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT_OPERATOR_PART)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT_COND_OR)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT_COND_OR_SEQ)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT_COND_AND)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT_COND_AND_SEQ)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT_COND_NOT)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT_COND_EXISTS)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT_COND_IS)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT_COND_COMPARISON)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT_COND_GROUP_COMPARISON)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT_COND_IN)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT_COND_IS_A_SET)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT_COND_IS_ANY)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT_COND_IS_EMPTY)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT_COND_IS_OF_TYPE)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT_COND_IS_PRESENT)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT_COND_LIKE)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT_COND_MEMEBER)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT_COND_BETWEEN)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT_COND_REGEXP_LIKE)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT_COND_SUBMULTISET)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT_COND_EQUALS_PATH)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT_COND_UNDER_PATH)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT_COND_PAREN)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__114)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__115)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__116)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__117)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__118)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__119)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__120)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__121)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__122)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__123)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__124)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__125)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__126)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__127)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__128)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__129)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__130)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__131)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__132)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__133)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__134)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__135)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__136)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__137)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__138)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__139)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__140)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__141)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__142)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__143)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__144)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__145)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__146)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__147)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__148)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__149)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__150)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__151)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__152)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__153)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__154)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__155)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__156)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__157)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__158)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__159)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__160)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__161)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__162)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__163)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__164)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__165)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__166)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__167)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__168)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__169)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__170)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__171)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__172)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__173)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__174)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__175)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__176)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__177)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__178)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__179)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__180)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__181)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__182)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__183)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__184)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__185)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__186)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__187)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__188)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__189)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__190)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__191)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__192)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__193)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__194)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__195)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__196)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__197)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__198)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__199)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__200)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__201)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__202)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__203)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__204)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__205)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__206)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__207)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__208)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__209)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__210)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__211)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__212)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__213)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__214)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__215)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__216)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__217)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__218)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__219)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__220)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__221)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__222)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__223)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__224)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__225)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__226)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__227)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__228)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__229)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__230)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__231)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__232)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__233)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__234)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__235)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__236)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__237)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__238)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__239)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__240)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__241)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__242)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__243)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__244)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__245)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__246)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__247)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__248)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__249)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__250)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__251)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__252)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__253)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__254)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__255)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__256)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__257)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__258)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__259)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__260)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__261)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__262)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__263)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__264)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__265)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__266)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__267)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__268)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__269)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__270)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__271)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__272)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__273)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__274)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__275)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__276)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__277)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__278)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__279)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__280)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__281)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__282)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__283)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__284)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mT__285)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mQUOTED_STRING)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mQSTRING)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mQS_ANGLE)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mQS_BRACE)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mQS_BRACK)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mQS_PAREN)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mQS_OTHER_CH)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mQS_OTHER)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mBINDVAR)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mID)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mSEMI)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mCOLON)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mDOUBLEDOT)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mDOT)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mPOINT)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mCOMMA)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mASTERISK)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mAT_SIGN)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mRPAREN)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mLPAREN)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mRBRACK)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mLBRACK)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mPLUS)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mMINUS)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mDIVIDE)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mEQ)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mPERCENTAGE)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mLLABEL)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mRLABEL)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mASSIGN)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mARROW)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mVERTBAR)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mDOUBLEVERTBAR)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mNOT_EQ)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mLTH)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mLEQ)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mGTH)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mGEQ)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mNUMBER)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mNUM)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mQUOTE)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mDOUBLEQUOTED_STRING)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mWS)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mSL_COMMENT)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mML_COMMENT)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mTYPE_ATTR)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mROWTYPE_ATTR)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mNOTFOUND_ATTR)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mFOUND_ATTR)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mISOPEN_ATTR)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mROWCOUNT_ATTR)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mBULK_ROWCOUNT_ATTR)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mCHARSET_ATTR)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mZV)	(struct OracleSQLLexer_Ctx_struct * ctx);
     void (*mTokens)	(struct OracleSQLLexer_Ctx_struct * ctx);
    const char * (*getGrammarFileName)();
    void            (*reset)  (struct OracleSQLLexer_Ctx_struct * ctx);
    void	    (*free)   (struct OracleSQLLexer_Ctx_struct * ctx);
        
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pOracleSQLLexer OracleSQLLexerNew         (pANTLR3_INPUT_STREAM instream);
ANTLR3_API pOracleSQLLexer OracleSQLLexerNewSSD      (pANTLR3_INPUT_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the lexer will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif 
#define EOF      -1
#define T__114      114
#define T__115      115
#define T__116      116
#define T__117      117
#define T__118      118
#define T__119      119
#define T__120      120
#define T__121      121
#define T__122      122
#define T__123      123
#define T__124      124
#define T__125      125
#define T__126      126
#define T__127      127
#define T__128      128
#define T__129      129
#define T__130      130
#define T__131      131
#define T__132      132
#define T__133      133
#define T__134      134
#define T__135      135
#define T__136      136
#define T__137      137
#define T__138      138
#define T__139      139
#define T__140      140
#define T__141      141
#define T__142      142
#define T__143      143
#define T__144      144
#define T__145      145
#define T__146      146
#define T__147      147
#define T__148      148
#define T__149      149
#define T__150      150
#define T__151      151
#define T__152      152
#define T__153      153
#define T__154      154
#define T__155      155
#define T__156      156
#define T__157      157
#define T__158      158
#define T__159      159
#define T__160      160
#define T__161      161
#define T__162      162
#define T__163      163
#define T__164      164
#define T__165      165
#define T__166      166
#define T__167      167
#define T__168      168
#define T__169      169
#define T__170      170
#define T__171      171
#define T__172      172
#define T__173      173
#define T__174      174
#define T__175      175
#define T__176      176
#define T__177      177
#define T__178      178
#define T__179      179
#define T__180      180
#define T__181      181
#define T__182      182
#define T__183      183
#define T__184      184
#define T__185      185
#define T__186      186
#define T__187      187
#define T__188      188
#define T__189      189
#define T__190      190
#define T__191      191
#define T__192      192
#define T__193      193
#define T__194      194
#define T__195      195
#define T__196      196
#define T__197      197
#define T__198      198
#define T__199      199
#define T__200      200
#define T__201      201
#define T__202      202
#define T__203      203
#define T__204      204
#define T__205      205
#define T__206      206
#define T__207      207
#define T__208      208
#define T__209      209
#define T__210      210
#define T__211      211
#define T__212      212
#define T__213      213
#define T__214      214
#define T__215      215
#define T__216      216
#define T__217      217
#define T__218      218
#define T__219      219
#define T__220      220
#define T__221      221
#define T__222      222
#define T__223      223
#define T__224      224
#define T__225      225
#define T__226      226
#define T__227      227
#define T__228      228
#define T__229      229
#define T__230      230
#define T__231      231
#define T__232      232
#define T__233      233
#define T__234      234
#define T__235      235
#define T__236      236
#define T__237      237
#define T__238      238
#define T__239      239
#define T__240      240
#define T__241      241
#define T__242      242
#define T__243      243
#define T__244      244
#define T__245      245
#define T__246      246
#define T__247      247
#define T__248      248
#define T__249      249
#define T__250      250
#define T__251      251
#define T__252      252
#define T__253      253
#define T__254      254
#define T__255      255
#define T__256      256
#define T__257      257
#define T__258      258
#define T__259      259
#define T__260      260
#define T__261      261
#define T__262      262
#define T__263      263
#define T__264      264
#define T__265      265
#define T__266      266
#define T__267      267
#define T__268      268
#define T__269      269
#define T__270      270
#define T__271      271
#define T__272      272
#define T__273      273
#define T__274      274
#define T__275      275
#define T__276      276
#define T__277      277
#define T__278      278
#define T__279      279
#define T__280      280
#define T__281      281
#define T__282      282
#define T__283      283
#define T__284      284
#define T__285      285
#define T_UNKNOWN      4
#define T_RESERVED      5
#define T_TABLE_ALIAS      6
#define T_COLUMN_ALIAS      7
#define T_COLUMN_NAME      8
#define T_TABLE_NAME      9
#define T_SCHEMA_NAME      10
#define T_FUNCTION_NAME      11
#define T_PACKAGE_NAME      12
#define T_DBLINK_NAME      13
#define T_BINDVAR_NAME      14
#define T_DECL      15
#define T_USE      16
#define T_IDENTIFIER      17
#define T_TABLE_REF      18
#define T_WITH      19
#define T_SELECT      20
#define T_SUBQUERY      21
#define T_TABLE_CAST      22
#define T_COLUMN_LIST      23
#define T_SELECT_COLUMN      24
#define T_FROM      25
#define T_WHERE      26
#define T_HIERARCHICAL      27
#define T_GROUP_BY      28
#define T_MODEL      29
#define T_UNION      30
#define T_ORDER_BY_CLAUSE      31
#define T_FOR_UPDATE_CLAUSE      32
#define T_JOINING_CLAUSE      33
#define T_OPERATOR_UNARY      34
#define T_OPERATOR_BINARY      35
#define T_OPERATOR_PART      36
#define T_COND_OR      37
#define T_COND_OR_SEQ      38
#define T_COND_AND      39
#define T_COND_AND_SEQ      40
#define T_COND_NOT      41
#define T_COND_EXISTS      42
#define T_COND_IS      43
#define T_COND_COMPARISON      44
#define T_COND_GROUP_COMPARISON      45
#define T_COND_IN      46
#define T_COND_IS_A_SET      47
#define T_COND_IS_ANY      48
#define T_COND_IS_EMPTY      49
#define T_COND_IS_OF_TYPE      50
#define T_COND_IS_PRESENT      51
#define T_COND_LIKE      52
#define T_COND_MEMEBER      53
#define T_COND_BETWEEN      54
#define T_COND_REGEXP_LIKE      55
#define T_COND_SUBMULTISET      56
#define T_COND_EQUALS_PATH      57
#define T_COND_UNDER_PATH      58
#define T_COND_PAREN      59
#define SEMI      60
#define LPAREN      61
#define RPAREN      62
#define EQ      63
#define COMMA      64
#define AT_SIGN      65
#define NUMBER      66
#define ASTERISK      67
#define DOT      68
#define PLUS      69
#define MINUS      70
#define DIVIDE      71
#define ARROW      72
#define QUOTED_STRING      73
#define FOUND_ATTR      74
#define NOTFOUND_ATTR      75
#define ISOPEN_ATTR      76
#define ROWCOUNT_ATTR      77
#define BULK_ROWCOUNT_ATTR      78
#define CHARSET_ATTR      79
#define ID      80
#define BINDVAR      81
#define COLON      82
#define GTH      83
#define LTH      84
#define LBRACK      85
#define RBRACK      86
#define QSTRING      87
#define QS_ANGLE      88
#define QS_BRACE      89
#define QS_BRACK      90
#define QS_PAREN      91
#define QS_OTHER      92
#define QUOTE      93
#define QS_OTHER_CH      94
#define DOUBLEQUOTED_STRING      95
#define NUM      96
#define POINT      97
#define DOUBLEDOT      98
#define PERCENTAGE      99
#define LLABEL      100
#define RLABEL      101
#define ASSIGN      102
#define VERTBAR      103
#define DOUBLEVERTBAR      104
#define NOT_EQ      105
#define LEQ      106
#define GEQ      107
#define WS      108
#define SL_COMMENT      109
#define ML_COMMENT      110
#define TYPE_ATTR      111
#define ROWTYPE_ATTR      112
#define ZV      113
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for OracleSQLLexer
 * =============================================================================
 */
/** \} */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
