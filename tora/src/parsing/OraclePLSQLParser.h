/** \file
 *  This C header file was generated by $ANTLR version 3.3 Nov 30, 2010 12:50:56
 *
 *     -  From the grammar source file : OraclePLSQL.g
 *     -                            On : 2011-09-03 01:17:50
 *     -                for the parser : OraclePLSQLParserParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The parser OraclePLSQLParser has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 * 
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pOraclePLSQLParser, which is returned from a call to OraclePLSQLParserNew().
 *
 * The methods in pOraclePLSQLParser are  as follows:
 *
 *  - OraclePLSQLParser_start_rule_return      pOraclePLSQLParser->start_rule(pOraclePLSQLParser)
 *  - OraclePLSQLParser_sqlplus_file_return      pOraclePLSQLParser->sqlplus_file(pOraclePLSQLParser)
 *  - OraclePLSQLParser_show_errors_return      pOraclePLSQLParser->show_errors(pOraclePLSQLParser)
 *  - OraclePLSQLParser_create_object_return      pOraclePLSQLParser->create_object(pOraclePLSQLParser)
 *  - OraclePLSQLParser_procedure_heading_return      pOraclePLSQLParser->procedure_heading(pOraclePLSQLParser)
 *  - OraclePLSQLParser_function_heading_return      pOraclePLSQLParser->function_heading(pOraclePLSQLParser)
 *  - OraclePLSQLParser_parameter_declarations_return      pOraclePLSQLParser->parameter_declarations(pOraclePLSQLParser)
 *  - OraclePLSQLParser_parameter_declaration_return      pOraclePLSQLParser->parameter_declaration(pOraclePLSQLParser)
 *  - OraclePLSQLParser_declare_section_return      pOraclePLSQLParser->declare_section(pOraclePLSQLParser)
 *  - OraclePLSQLParser_type_definition_sub_return      pOraclePLSQLParser->type_definition_sub(pOraclePLSQLParser)
 *  - OraclePLSQLParser_type_definition_return      pOraclePLSQLParser->type_definition(pOraclePLSQLParser)
 *  - OraclePLSQLParser_subtype_definition_sub_return      pOraclePLSQLParser->subtype_definition_sub(pOraclePLSQLParser)
 *  - OraclePLSQLParser_subtype_definition_return      pOraclePLSQLParser->subtype_definition(pOraclePLSQLParser)
 *  - OraclePLSQLParser_cursor_definition_sub_return      pOraclePLSQLParser->cursor_definition_sub(pOraclePLSQLParser)
 *  - OraclePLSQLParser_cursor_definition_return      pOraclePLSQLParser->cursor_definition(pOraclePLSQLParser)
 *  - OraclePLSQLParser_item_declaration_return      pOraclePLSQLParser->item_declaration(pOraclePLSQLParser)
 *  - OraclePLSQLParser_variable_declaration_return      pOraclePLSQLParser->variable_declaration(pOraclePLSQLParser)
 *  - OraclePLSQLParser_constant_declaration_return      pOraclePLSQLParser->constant_declaration(pOraclePLSQLParser)
 *  - OraclePLSQLParser_exception_declaration_return      pOraclePLSQLParser->exception_declaration(pOraclePLSQLParser)
 *  - OraclePLSQLParser_record_type_definition_return      pOraclePLSQLParser->record_type_definition(pOraclePLSQLParser)
 *  - OraclePLSQLParser_record_field_declaration_return      pOraclePLSQLParser->record_field_declaration(pOraclePLSQLParser)
 *  - OraclePLSQLParser_collection_type_definition_return      pOraclePLSQLParser->collection_type_definition(pOraclePLSQLParser)
 *  - OraclePLSQLParser_varray_type_definition_return      pOraclePLSQLParser->varray_type_definition(pOraclePLSQLParser)
 *  - OraclePLSQLParser_nested_table_type_definition_return      pOraclePLSQLParser->nested_table_type_definition(pOraclePLSQLParser)
 *  - OraclePLSQLParser_associative_index_type_return      pOraclePLSQLParser->associative_index_type(pOraclePLSQLParser)
 *  - OraclePLSQLParser_ref_cursor_type_definition_return      pOraclePLSQLParser->ref_cursor_type_definition(pOraclePLSQLParser)
 *  - OraclePLSQLParser_datatype_name_return      pOraclePLSQLParser->datatype_name(pOraclePLSQLParser)
 *  - OraclePLSQLParser_datatype_return      pOraclePLSQLParser->datatype(pOraclePLSQLParser)
 *  - OraclePLSQLParser_function_declaration_or_definition_return      pOraclePLSQLParser->function_declaration_or_definition(pOraclePLSQLParser)
 *  - OraclePLSQLParser_function_declaration_or_definition_sub_return      pOraclePLSQLParser->function_declaration_or_definition_sub(pOraclePLSQLParser)
 *  - OraclePLSQLParser_procedure_declaration_or_definition_return      pOraclePLSQLParser->procedure_declaration_or_definition(pOraclePLSQLParser)
 *  - OraclePLSQLParser_procedure_declaration_or_definition_sub_return      pOraclePLSQLParser->procedure_declaration_or_definition_sub(pOraclePLSQLParser)
 *  - OraclePLSQLParser_statement_return      pOraclePLSQLParser->statement(pOraclePLSQLParser)
 *  - OraclePLSQLParser_lvalue_return      pOraclePLSQLParser->lvalue(pOraclePLSQLParser)
 *  - OraclePLSQLParser_assign_or_call_statement_return      pOraclePLSQLParser->assign_or_call_statement(pOraclePLSQLParser)
 *  - OraclePLSQLParser_call_first_return      pOraclePLSQLParser->call_first(pOraclePLSQLParser)
 *  - OraclePLSQLParser_call_next_return      pOraclePLSQLParser->call_next(pOraclePLSQLParser)
 *  - OraclePLSQLParser_delete_call_return      pOraclePLSQLParser->delete_call(pOraclePLSQLParser)
 *  - OraclePLSQLParser_basic_loop_statement_return      pOraclePLSQLParser->basic_loop_statement(pOraclePLSQLParser)
 *  - OraclePLSQLParser_basic_loop_statement_sub_return      pOraclePLSQLParser->basic_loop_statement_sub(pOraclePLSQLParser)
 *  - OraclePLSQLParser_case_statement_return      pOraclePLSQLParser->case_statement(pOraclePLSQLParser)
 *  - OraclePLSQLParser_case_statement_sub_return      pOraclePLSQLParser->case_statement_sub(pOraclePLSQLParser)
 *  - OraclePLSQLParser_close_statement_return      pOraclePLSQLParser->close_statement(pOraclePLSQLParser)
 *  - OraclePLSQLParser_close_statement_sub_return      pOraclePLSQLParser->close_statement_sub(pOraclePLSQLParser)
 *  - OraclePLSQLParser_continue_statement_return      pOraclePLSQLParser->continue_statement(pOraclePLSQLParser)
 *  - OraclePLSQLParser_continue_statement_sub_return      pOraclePLSQLParser->continue_statement_sub(pOraclePLSQLParser)
 *  - OraclePLSQLParser_execute_immediate_statement_return      pOraclePLSQLParser->execute_immediate_statement(pOraclePLSQLParser)
 *  - OraclePLSQLParser_execute_immediate_statement_sub_return      pOraclePLSQLParser->execute_immediate_statement_sub(pOraclePLSQLParser)
 *  - OraclePLSQLParser_exit_statement_return      pOraclePLSQLParser->exit_statement(pOraclePLSQLParser)
 *  - OraclePLSQLParser_exit_statement_sub_return      pOraclePLSQLParser->exit_statement_sub(pOraclePLSQLParser)
 *  - OraclePLSQLParser_fetch_statement_return      pOraclePLSQLParser->fetch_statement(pOraclePLSQLParser)
 *  - OraclePLSQLParser_fetch_statement_sub_return      pOraclePLSQLParser->fetch_statement_sub(pOraclePLSQLParser)
 *  - OraclePLSQLParser_into_clause_return      pOraclePLSQLParser->into_clause(pOraclePLSQLParser)
 *  - OraclePLSQLParser_bulk_collect_into_clause_return      pOraclePLSQLParser->bulk_collect_into_clause(pOraclePLSQLParser)
 *  - OraclePLSQLParser_using_clause_return      pOraclePLSQLParser->using_clause(pOraclePLSQLParser)
 *  - OraclePLSQLParser_param_modifiers_return      pOraclePLSQLParser->param_modifiers(pOraclePLSQLParser)
 *  - OraclePLSQLParser_dynamic_returning_clause_return      pOraclePLSQLParser->dynamic_returning_clause(pOraclePLSQLParser)
 *  - OraclePLSQLParser_for_loop_statement_return      pOraclePLSQLParser->for_loop_statement(pOraclePLSQLParser)
 *  - OraclePLSQLParser_for_loop_statement_sub_return      pOraclePLSQLParser->for_loop_statement_sub(pOraclePLSQLParser)
 *  - OraclePLSQLParser_forall_statement_return      pOraclePLSQLParser->forall_statement(pOraclePLSQLParser)
 *  - OraclePLSQLParser_forall_statement_sub_return      pOraclePLSQLParser->forall_statement_sub(pOraclePLSQLParser)
 *  - OraclePLSQLParser_bounds_clause_return      pOraclePLSQLParser->bounds_clause(pOraclePLSQLParser)
 *  - OraclePLSQLParser_goto_statement_return      pOraclePLSQLParser->goto_statement(pOraclePLSQLParser)
 *  - OraclePLSQLParser_if_statement_return      pOraclePLSQLParser->if_statement(pOraclePLSQLParser)
 *  - OraclePLSQLParser_if_statement_if_return      pOraclePLSQLParser->if_statement_if(pOraclePLSQLParser)
 *  - OraclePLSQLParser_if_statement_elsif_return      pOraclePLSQLParser->if_statement_elsif(pOraclePLSQLParser)
 *  - OraclePLSQLParser_if_statement_else_return      pOraclePLSQLParser->if_statement_else(pOraclePLSQLParser)
 *  - OraclePLSQLParser_if_statement_end_return      pOraclePLSQLParser->if_statement_end(pOraclePLSQLParser)
 *  - OraclePLSQLParser_while_loop_statement_return      pOraclePLSQLParser->while_loop_statement(pOraclePLSQLParser)
 *  - OraclePLSQLParser_while_loop_statement_sub_return      pOraclePLSQLParser->while_loop_statement_sub(pOraclePLSQLParser)
 *  - OraclePLSQLParser_pipe_row_statement_return      pOraclePLSQLParser->pipe_row_statement(pOraclePLSQLParser)
 *  - OraclePLSQLParser_pipe_row_statement_sub_return      pOraclePLSQLParser->pipe_row_statement_sub(pOraclePLSQLParser)
 *  - OraclePLSQLParser_null_statement_return      pOraclePLSQLParser->null_statement(pOraclePLSQLParser)
 *  - OraclePLSQLParser_open_statement_return      pOraclePLSQLParser->open_statement(pOraclePLSQLParser)
 *  - OraclePLSQLParser_open_statement_sub_return      pOraclePLSQLParser->open_statement_sub(pOraclePLSQLParser)
 *  - OraclePLSQLParser_pragma_return      pOraclePLSQLParser->pragma(pOraclePLSQLParser)
 *  - OraclePLSQLParser_raise_statement_return      pOraclePLSQLParser->raise_statement(pOraclePLSQLParser)
 *  - OraclePLSQLParser_raise_statement_sub_return      pOraclePLSQLParser->raise_statement_sub(pOraclePLSQLParser)
 *  - OraclePLSQLParser_return_statement_return      pOraclePLSQLParser->return_statement(pOraclePLSQLParser)
 *  - OraclePLSQLParser_return_statement_sub_return      pOraclePLSQLParser->return_statement_sub(pOraclePLSQLParser)
 *  - OraclePLSQLParser_declare_block_return      pOraclePLSQLParser->declare_block(pOraclePLSQLParser)
 *  - OraclePLSQLParser_body_return      pOraclePLSQLParser->body(pOraclePLSQLParser)
 *  - OraclePLSQLParser_exception_handler_return      pOraclePLSQLParser->exception_handler(pOraclePLSQLParser)
 *  - OraclePLSQLParser_exception_handler_sub_return      pOraclePLSQLParser->exception_handler_sub(pOraclePLSQLParser)
 *  - OraclePLSQLParser_plsql_block_return      pOraclePLSQLParser->plsql_block(pOraclePLSQLParser)
 *  - OraclePLSQLParser_label_return      pOraclePLSQLParser->label(pOraclePLSQLParser)
 *  - OraclePLSQLParser_qual_id_return      pOraclePLSQLParser->qual_id(pOraclePLSQLParser)
 *  - OraclePLSQLParser_schema_name_return      pOraclePLSQLParser->schema_name(pOraclePLSQLParser)
 *  - OraclePLSQLParser_object_attribute_name_return      pOraclePLSQLParser->object_attribute_name(pOraclePLSQLParser)
 *  - OraclePLSQLParser_cursor_name_return      pOraclePLSQLParser->cursor_name(pOraclePLSQLParser)
 *  - OraclePLSQLParser_variable_name_return      pOraclePLSQLParser->variable_name(pOraclePLSQLParser)
 *  - OraclePLSQLParser_variable_name_ex_return      pOraclePLSQLParser->variable_name_ex(pOraclePLSQLParser)
 *  - OraclePLSQLParser_parameter_name_return      pOraclePLSQLParser->parameter_name(pOraclePLSQLParser)
 *  - OraclePLSQLParser_column_name_return      pOraclePLSQLParser->column_name(pOraclePLSQLParser)
 *  - OraclePLSQLParser_procedure_name_return      pOraclePLSQLParser->procedure_name(pOraclePLSQLParser)
 *  - OraclePLSQLParser_exception_name_return      pOraclePLSQLParser->exception_name(pOraclePLSQLParser)
 *  - OraclePLSQLParser_package_name_return      pOraclePLSQLParser->package_name(pOraclePLSQLParser)
 *  - OraclePLSQLParser_identifier_return      pOraclePLSQLParser->identifier(pOraclePLSQLParser)
 *  - OraclePLSQLParser_sql_statement_return      pOraclePLSQLParser->sql_statement(pOraclePLSQLParser)
 *  - OraclePLSQLParser_commit_statement_return      pOraclePLSQLParser->commit_statement(pOraclePLSQLParser)
 *  - OraclePLSQLParser_delete_statement_return      pOraclePLSQLParser->delete_statement(pOraclePLSQLParser)
 *  - OraclePLSQLParser_insert_statement_return      pOraclePLSQLParser->insert_statement(pOraclePLSQLParser)
 *  - OraclePLSQLParser_lock_table_statement_return      pOraclePLSQLParser->lock_table_statement(pOraclePLSQLParser)
 *  - OraclePLSQLParser_rollback_statement_return      pOraclePLSQLParser->rollback_statement(pOraclePLSQLParser)
 *  - OraclePLSQLParser_savepoint_statement_return      pOraclePLSQLParser->savepoint_statement(pOraclePLSQLParser)
 *  - OraclePLSQLParser_select_statement_return      pOraclePLSQLParser->select_statement(pOraclePLSQLParser)
 *  - OraclePLSQLParser_merge_statement_return      pOraclePLSQLParser->merge_statement(pOraclePLSQLParser)
 *  - OraclePLSQLParser_set_transaction_statement_return      pOraclePLSQLParser->set_transaction_statement(pOraclePLSQLParser)
 *  - OraclePLSQLParser_update_statement_return      pOraclePLSQLParser->update_statement(pOraclePLSQLParser)
 *  - OraclePLSQLParser_swallow_to_semi_return      pOraclePLSQLParser->swallow_to_semi(pOraclePLSQLParser)
 *  - OraclePLSQLParser_label_name_return      pOraclePLSQLParser->label_name(pOraclePLSQLParser)
 *  - OraclePLSQLParser_dblink_name_return      pOraclePLSQLParser->dblink_name(pOraclePLSQLParser)
 *  - OraclePLSQLParser_expression_return      pOraclePLSQLParser->expression(pOraclePLSQLParser)
 *  - OraclePLSQLParser_or_expr_return      pOraclePLSQLParser->or_expr(pOraclePLSQLParser)
 *  - OraclePLSQLParser_and_expr_return      pOraclePLSQLParser->and_expr(pOraclePLSQLParser)
 *  - OraclePLSQLParser_not_expr_return      pOraclePLSQLParser->not_expr(pOraclePLSQLParser)
 *  - OraclePLSQLParser_compare_expr_return      pOraclePLSQLParser->compare_expr(pOraclePLSQLParser)
 *  - OraclePLSQLParser_is_null_expr_return      pOraclePLSQLParser->is_null_expr(pOraclePLSQLParser)
 *  - OraclePLSQLParser_like_expr_return      pOraclePLSQLParser->like_expr(pOraclePLSQLParser)
 *  - OraclePLSQLParser_between_expr_return      pOraclePLSQLParser->between_expr(pOraclePLSQLParser)
 *  - OraclePLSQLParser_in_expr_return      pOraclePLSQLParser->in_expr(pOraclePLSQLParser)
 *  - OraclePLSQLParser_numeric_expression_return      pOraclePLSQLParser->numeric_expression(pOraclePLSQLParser)
 *  - OraclePLSQLParser_add_expr_return      pOraclePLSQLParser->add_expr(pOraclePLSQLParser)
 *  - OraclePLSQLParser_mul_expr_return      pOraclePLSQLParser->mul_expr(pOraclePLSQLParser)
 *  - OraclePLSQLParser_unary_sign_expr_return      pOraclePLSQLParser->unary_sign_expr(pOraclePLSQLParser)
 *  - OraclePLSQLParser_atom_return      pOraclePLSQLParser->atom(pOraclePLSQLParser)
 *  - OraclePLSQLParser_variable_or_function_call_return      pOraclePLSQLParser->variable_or_function_call(pOraclePLSQLParser)
 *  - OraclePLSQLParser_timestamp_expression_return      pOraclePLSQLParser->timestamp_expression(pOraclePLSQLParser)
 *  - OraclePLSQLParser_cast_expression_return      pOraclePLSQLParser->cast_expression(pOraclePLSQLParser)
 *  - OraclePLSQLParser_extract_datetime_expression_return      pOraclePLSQLParser->extract_datetime_expression(pOraclePLSQLParser)
 *  - OraclePLSQLParser_attribute_return      pOraclePLSQLParser->attribute(pOraclePLSQLParser)
 *  - OraclePLSQLParser_call_args_return      pOraclePLSQLParser->call_args(pOraclePLSQLParser)
 *  - OraclePLSQLParser_boolean_atom_return      pOraclePLSQLParser->boolean_atom(pOraclePLSQLParser)
 *  - OraclePLSQLParser_numeric_atom_return      pOraclePLSQLParser->numeric_atom(pOraclePLSQLParser)
 *  - OraclePLSQLParser_numeric_literal_return      pOraclePLSQLParser->numeric_literal(pOraclePLSQLParser)
 *  - OraclePLSQLParser_boolean_literal_return      pOraclePLSQLParser->boolean_literal(pOraclePLSQLParser)
 *  - OraclePLSQLParser_string_literal_return      pOraclePLSQLParser->string_literal(pOraclePLSQLParser)
 *  - OraclePLSQLParser_collection_exists_return      pOraclePLSQLParser->collection_exists(pOraclePLSQLParser)
 *  - OraclePLSQLParser_conditional_predicate_return      pOraclePLSQLParser->conditional_predicate(pOraclePLSQLParser)
 *  - OraclePLSQLParser_parameter_return      pOraclePLSQLParser->parameter(pOraclePLSQLParser)
 *  - OraclePLSQLParser_create_package_return      pOraclePLSQLParser->create_package(pOraclePLSQLParser)
 *  - OraclePLSQLParser_create_package_body_return      pOraclePLSQLParser->create_package_body(pOraclePLSQLParser)
 *  - OraclePLSQLParser_create_procedure_return      pOraclePLSQLParser->create_procedure(pOraclePLSQLParser)
 *  - OraclePLSQLParser_create_function_return      pOraclePLSQLParser->create_function(pOraclePLSQLParser)
 *  - OraclePLSQLParser_create_trigger_return      pOraclePLSQLParser->create_trigger(pOraclePLSQLParser)
 *  - OraclePLSQLParser_create_type_return      pOraclePLSQLParser->create_type(pOraclePLSQLParser)
 *  - OraclePLSQLParser_invoker_rights_clause_return      pOraclePLSQLParser->invoker_rights_clause(pOraclePLSQLParser)
 *  - OraclePLSQLParser_call_spec_return      pOraclePLSQLParser->call_spec(pOraclePLSQLParser)
 *  - OraclePLSQLParser_r_char_return      pOraclePLSQLParser->r_char(pOraclePLSQLParser)
 *  - OraclePLSQLParser_r_from_return      pOraclePLSQLParser->r_from(pOraclePLSQLParser)
 *  - OraclePLSQLParser_r_long_return      pOraclePLSQLParser->r_long(pOraclePLSQLParser)
 *  - OraclePLSQLParser_r_raw_return      pOraclePLSQLParser->r_raw(pOraclePLSQLParser)
 *  - OraclePLSQLParser_r_set_return      pOraclePLSQLParser->r_set(pOraclePLSQLParser)
 *  - OraclePLSQLParser_r_to_return      pOraclePLSQLParser->r_to(pOraclePLSQLParser)
 *  - OraclePLSQLParser_r_varchar_return      pOraclePLSQLParser->r_varchar(pOraclePLSQLParser)
 *  - OraclePLSQLParser_r_varchar2_return      pOraclePLSQLParser->r_varchar2(pOraclePLSQLParser)
 *  - OraclePLSQLParser_r_with_return      pOraclePLSQLParser->r_with(pOraclePLSQLParser)
 *  - OraclePLSQLParser_kAT_return      pOraclePLSQLParser->kAT(pOraclePLSQLParser)
 *  - OraclePLSQLParser_kERRORS_return      pOraclePLSQLParser->kERRORS(pOraclePLSQLParser)
 *  - OraclePLSQLParser_kEXCEPTIONS_return      pOraclePLSQLParser->kEXCEPTIONS(pOraclePLSQLParser)
 *  - OraclePLSQLParser_kFOUND_return      pOraclePLSQLParser->kFOUND(pOraclePLSQLParser)
 *  - OraclePLSQLParser_kINDICES_return      pOraclePLSQLParser->kINDICES(pOraclePLSQLParser)
 *  - OraclePLSQLParser_kMOD_return      pOraclePLSQLParser->kMOD(pOraclePLSQLParser)
 *  - OraclePLSQLParser_kNAME_return      pOraclePLSQLParser->kNAME(pOraclePLSQLParser)
 *  - OraclePLSQLParser_kOF_return      pOraclePLSQLParser->kOF(pOraclePLSQLParser)
 *  - OraclePLSQLParser_kREPLACE_return      pOraclePLSQLParser->kREPLACE(pOraclePLSQLParser)
 *  - OraclePLSQLParser_kSAVE_return      pOraclePLSQLParser->kSAVE(pOraclePLSQLParser)
 *  - OraclePLSQLParser_kSHOW_return      pOraclePLSQLParser->kSHOW(pOraclePLSQLParser)
 *  - OraclePLSQLParser_kVALUES_return      pOraclePLSQLParser->kVALUES(pOraclePLSQLParser)
 *  - OraclePLSQLParser_kBYTE_return      pOraclePLSQLParser->kBYTE(pOraclePLSQLParser)
 *  - OraclePLSQLParser_kDAY_return      pOraclePLSQLParser->kDAY(pOraclePLSQLParser)
 *  - OraclePLSQLParser_kMONTH_return      pOraclePLSQLParser->kMONTH(pOraclePLSQLParser)
 *  - OraclePLSQLParser_kSECOND_return      pOraclePLSQLParser->kSECOND(pOraclePLSQLParser)
 *  - OraclePLSQLParser_kYEAR_return      pOraclePLSQLParser->kYEAR(pOraclePLSQLParser)
 *  - OraclePLSQLParser_kLOCAL_return      pOraclePLSQLParser->kLOCAL(pOraclePLSQLParser)
 *  - OraclePLSQLParser_kZONE_return      pOraclePLSQLParser->kZONE(pOraclePLSQLParser)
 *  - OraclePLSQLParser_kTIME_return      pOraclePLSQLParser->kTIME(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_aggregate_return      pOraclePLSQLParser->k_aggregate(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_and_return      pOraclePLSQLParser->k_and(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_array_return      pOraclePLSQLParser->k_array(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_as_return      pOraclePLSQLParser->k_as(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_authid_return      pOraclePLSQLParser->k_authid(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_between_return      pOraclePLSQLParser->k_between(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_body_return      pOraclePLSQLParser->k_body(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_bulk_return      pOraclePLSQLParser->k_bulk(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_by_return      pOraclePLSQLParser->k_by(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_case_return      pOraclePLSQLParser->k_case(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_character_return      pOraclePLSQLParser->k_character(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_create_return      pOraclePLSQLParser->k_create(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_collect_return      pOraclePLSQLParser->k_collect(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_commit_return      pOraclePLSQLParser->k_commit(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_current_user_return      pOraclePLSQLParser->k_current_user(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_date_return      pOraclePLSQLParser->k_date(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_default_return      pOraclePLSQLParser->k_default(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_definer_return      pOraclePLSQLParser->k_definer(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_delete_return      pOraclePLSQLParser->k_delete(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_else_return      pOraclePLSQLParser->k_else(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_elsif_return      pOraclePLSQLParser->k_elsif(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_external_return      pOraclePLSQLParser->k_external(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_false_return      pOraclePLSQLParser->k_false(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_fetch_return      pOraclePLSQLParser->k_fetch(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_for_return      pOraclePLSQLParser->k_for(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_forall_return      pOraclePLSQLParser->k_forall(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_goto_return      pOraclePLSQLParser->k_goto(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_if_return      pOraclePLSQLParser->k_if(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_index_return      pOraclePLSQLParser->k_index(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_insert_return      pOraclePLSQLParser->k_insert(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_into_return      pOraclePLSQLParser->k_into(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_is_return      pOraclePLSQLParser->k_is(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_language_return      pOraclePLSQLParser->k_language(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_like_return      pOraclePLSQLParser->k_like(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_limit_return      pOraclePLSQLParser->k_limit(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_lock_return      pOraclePLSQLParser->k_lock(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_nchar_return      pOraclePLSQLParser->k_nchar(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_not_return      pOraclePLSQLParser->k_not(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_null_return      pOraclePLSQLParser->k_null(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_open_return      pOraclePLSQLParser->k_open(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_or_return      pOraclePLSQLParser->k_or(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_package_return      pOraclePLSQLParser->k_package(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_raise_return      pOraclePLSQLParser->k_raise(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_rollback_return      pOraclePLSQLParser->k_rollback(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_savepoint_return      pOraclePLSQLParser->k_savepoint(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_select_return      pOraclePLSQLParser->k_select(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_sql_return      pOraclePLSQLParser->k_sql(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_table_return      pOraclePLSQLParser->k_table(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_timestamp_return      pOraclePLSQLParser->k_timestamp(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_transaction_return      pOraclePLSQLParser->k_transaction(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_trigger_return      pOraclePLSQLParser->k_trigger(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_true_return      pOraclePLSQLParser->k_true(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_then_return      pOraclePLSQLParser->k_then(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_type_return      pOraclePLSQLParser->k_type(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_update_return      pOraclePLSQLParser->k_update(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_while_return      pOraclePLSQLParser->k_while(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_inserting_return      pOraclePLSQLParser->k_inserting(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_updating_return      pOraclePLSQLParser->k_updating(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_deleting_return      pOraclePLSQLParser->k_deleting(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_exists_return      pOraclePLSQLParser->k_exists(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_begin_return      pOraclePLSQLParser->k_begin(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_call_return      pOraclePLSQLParser->k_call(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_cast_return      pOraclePLSQLParser->k_cast(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_clob_return      pOraclePLSQLParser->k_clob(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_close_return      pOraclePLSQLParser->k_close(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_constant_return      pOraclePLSQLParser->k_constant(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_continue_return      pOraclePLSQLParser->k_continue(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_cursor_return      pOraclePLSQLParser->k_cursor(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_declare_return      pOraclePLSQLParser->k_declare(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_deterministic_return      pOraclePLSQLParser->k_deterministic(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_end_return      pOraclePLSQLParser->k_end(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_escape_return      pOraclePLSQLParser->k_escape(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_exception_return      pOraclePLSQLParser->k_exception(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_execute_return      pOraclePLSQLParser->k_execute(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_exit_return      pOraclePLSQLParser->k_exit(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_function_return      pOraclePLSQLParser->k_function(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_immediate_return      pOraclePLSQLParser->k_immediate(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_interval_return      pOraclePLSQLParser->k_interval(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_loop_return      pOraclePLSQLParser->k_loop(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_merge_return      pOraclePLSQLParser->k_merge(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_national_return      pOraclePLSQLParser->k_national(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_nocopy_return      pOraclePLSQLParser->k_nocopy(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_others_return      pOraclePLSQLParser->k_others(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_parallel_enable_return      pOraclePLSQLParser->k_parallel_enable(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_pipe_return      pOraclePLSQLParser->k_pipe(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_pipelined_return      pOraclePLSQLParser->k_pipelined(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_pragma_return      pOraclePLSQLParser->k_pragma(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_procedure_return      pOraclePLSQLParser->k_procedure(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_record_return      pOraclePLSQLParser->k_record(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_ref_return      pOraclePLSQLParser->k_ref(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_result_cache_return      pOraclePLSQLParser->k_result_cache(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_return_return      pOraclePLSQLParser->k_return(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_returning_return      pOraclePLSQLParser->k_returning(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_row_return      pOraclePLSQLParser->k_row(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_rowtype_return      pOraclePLSQLParser->k_rowtype(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_systimestamp_return      pOraclePLSQLParser->k_systimestamp(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_subtype_return      pOraclePLSQLParser->k_subtype(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_varray_return      pOraclePLSQLParser->k_varray(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_varying_return      pOraclePLSQLParser->k_varying(pOraclePLSQLParser)
 *  - OraclePLSQLParser_k_when_return      pOraclePLSQLParser->k_when(pOraclePLSQLParser)
 *  - OraclePLSQLParser_quoted_string_return      pOraclePLSQLParser->quoted_string(pOraclePLSQLParser)
 *  - OraclePLSQLParser_bindvar_return      pOraclePLSQLParser->bindvar(pOraclePLSQLParser)
 *  - OraclePLSQLParser_doublevertbar_return      pOraclePLSQLParser->doublevertbar(pOraclePLSQLParser)
 *  - OraclePLSQLParser_not_equal_return      pOraclePLSQLParser->not_equal(pOraclePLSQLParser)
 *  - OraclePLSQLParser_leq_return      pOraclePLSQLParser->leq(pOraclePLSQLParser)
 *  - OraclePLSQLParser_geq_return      pOraclePLSQLParser->geq(pOraclePLSQLParser)
 *  - OraclePLSQLParser_type_attr_return      pOraclePLSQLParser->type_attr(pOraclePLSQLParser)
 *  - OraclePLSQLParser_rowtype_attr_return      pOraclePLSQLParser->rowtype_attr(pOraclePLSQLParser)
 *  - OraclePLSQLParser_notfound_attr_return      pOraclePLSQLParser->notfound_attr(pOraclePLSQLParser)
 *  - OraclePLSQLParser_found_attr_return      pOraclePLSQLParser->found_attr(pOraclePLSQLParser)
 *  - OraclePLSQLParser_isopen_attr_return      pOraclePLSQLParser->isopen_attr(pOraclePLSQLParser)
 *  - OraclePLSQLParser_rowcount_attr_return      pOraclePLSQLParser->rowcount_attr(pOraclePLSQLParser)
 *  - OraclePLSQLParser_bulk_rowcount_attr_return      pOraclePLSQLParser->bulk_rowcount_attr(pOraclePLSQLParser)
 *  - OraclePLSQLParser_charset_attr_return      pOraclePLSQLParser->charset_attr(pOraclePLSQLParser)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_OraclePLSQLParser_H
#define _OraclePLSQLParser_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

#include "macros.h"
#include "error_handler.h"

 
#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct OraclePLSQLParser_Ctx_struct OraclePLSQLParser, * pOraclePLSQLParser;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule 
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/* ========================
 * BACKTRACKING IS ENABLED
 * ========================
 */
typedef struct OraclePLSQLParser_start_rule_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_start_rule_return;

typedef struct OraclePLSQLParser_sqlplus_file_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_sqlplus_file_return;

typedef struct OraclePLSQLParser_show_errors_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_show_errors_return;

typedef struct OraclePLSQLParser_create_object_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_create_object_return;

typedef struct OraclePLSQLParser_procedure_heading_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_procedure_heading_return;

typedef struct OraclePLSQLParser_function_heading_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_function_heading_return;

typedef struct OraclePLSQLParser_parameter_declarations_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_parameter_declarations_return;

typedef struct OraclePLSQLParser_parameter_declaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_parameter_declaration_return;

typedef struct OraclePLSQLParser_declare_section_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_declare_section_return;

typedef struct OraclePLSQLParser_type_definition_sub_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_type_definition_sub_return;

typedef struct OraclePLSQLParser_type_definition_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_type_definition_return;

typedef struct OraclePLSQLParser_subtype_definition_sub_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_subtype_definition_sub_return;

typedef struct OraclePLSQLParser_subtype_definition_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_subtype_definition_return;

typedef struct OraclePLSQLParser_cursor_definition_sub_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_cursor_definition_sub_return;

typedef struct OraclePLSQLParser_cursor_definition_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_cursor_definition_return;

typedef struct OraclePLSQLParser_item_declaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_item_declaration_return;

typedef struct OraclePLSQLParser_variable_declaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_variable_declaration_return;

typedef struct OraclePLSQLParser_constant_declaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_constant_declaration_return;

typedef struct OraclePLSQLParser_exception_declaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_exception_declaration_return;

typedef struct OraclePLSQLParser_record_type_definition_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_record_type_definition_return;

typedef struct OraclePLSQLParser_record_field_declaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_record_field_declaration_return;

typedef struct OraclePLSQLParser_collection_type_definition_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_collection_type_definition_return;

typedef struct OraclePLSQLParser_varray_type_definition_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_varray_type_definition_return;

typedef struct OraclePLSQLParser_nested_table_type_definition_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_nested_table_type_definition_return;

typedef struct OraclePLSQLParser_associative_index_type_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_associative_index_type_return;

typedef struct OraclePLSQLParser_ref_cursor_type_definition_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_ref_cursor_type_definition_return;

typedef struct OraclePLSQLParser_datatype_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_datatype_name_return;

typedef struct OraclePLSQLParser_datatype_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_datatype_return;

typedef struct OraclePLSQLParser_function_declaration_or_definition_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_function_declaration_or_definition_return;

typedef struct OraclePLSQLParser_function_declaration_or_definition_sub_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_function_declaration_or_definition_sub_return;

typedef struct OraclePLSQLParser_procedure_declaration_or_definition_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_procedure_declaration_or_definition_return;

typedef struct OraclePLSQLParser_procedure_declaration_or_definition_sub_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_procedure_declaration_or_definition_sub_return;

typedef struct OraclePLSQLParser_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_statement_return;

typedef struct OraclePLSQLParser_lvalue_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_lvalue_return;

typedef struct OraclePLSQLParser_assign_or_call_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_assign_or_call_statement_return;

typedef struct OraclePLSQLParser_call_first_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_call_first_return;

typedef struct OraclePLSQLParser_call_next_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_call_next_return;

typedef struct OraclePLSQLParser_delete_call_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_delete_call_return;

typedef struct OraclePLSQLParser_basic_loop_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_basic_loop_statement_return;

typedef struct OraclePLSQLParser_basic_loop_statement_sub_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_basic_loop_statement_sub_return;

typedef struct OraclePLSQLParser_case_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_case_statement_return;

typedef struct OraclePLSQLParser_case_statement_sub_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_case_statement_sub_return;

typedef struct OraclePLSQLParser_close_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_close_statement_return;

typedef struct OraclePLSQLParser_close_statement_sub_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_close_statement_sub_return;

typedef struct OraclePLSQLParser_continue_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_continue_statement_return;

typedef struct OraclePLSQLParser_continue_statement_sub_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_continue_statement_sub_return;

typedef struct OraclePLSQLParser_execute_immediate_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_execute_immediate_statement_return;

typedef struct OraclePLSQLParser_execute_immediate_statement_sub_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_execute_immediate_statement_sub_return;

typedef struct OraclePLSQLParser_exit_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_exit_statement_return;

typedef struct OraclePLSQLParser_exit_statement_sub_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_exit_statement_sub_return;

typedef struct OraclePLSQLParser_fetch_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_fetch_statement_return;

typedef struct OraclePLSQLParser_fetch_statement_sub_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_fetch_statement_sub_return;

typedef struct OraclePLSQLParser_into_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_into_clause_return;

typedef struct OraclePLSQLParser_bulk_collect_into_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_bulk_collect_into_clause_return;

typedef struct OraclePLSQLParser_using_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_using_clause_return;

typedef struct OraclePLSQLParser_param_modifiers_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_param_modifiers_return;

typedef struct OraclePLSQLParser_dynamic_returning_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_dynamic_returning_clause_return;

typedef struct OraclePLSQLParser_for_loop_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_for_loop_statement_return;

typedef struct OraclePLSQLParser_for_loop_statement_sub_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_for_loop_statement_sub_return;

typedef struct OraclePLSQLParser_forall_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_forall_statement_return;

typedef struct OraclePLSQLParser_forall_statement_sub_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_forall_statement_sub_return;

typedef struct OraclePLSQLParser_bounds_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_bounds_clause_return;

typedef struct OraclePLSQLParser_goto_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_goto_statement_return;

typedef struct OraclePLSQLParser_if_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_if_statement_return;

typedef struct OraclePLSQLParser_if_statement_if_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_if_statement_if_return;

typedef struct OraclePLSQLParser_if_statement_elsif_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_if_statement_elsif_return;

typedef struct OraclePLSQLParser_if_statement_else_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_if_statement_else_return;

typedef struct OraclePLSQLParser_if_statement_end_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_if_statement_end_return;

typedef struct OraclePLSQLParser_while_loop_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_while_loop_statement_return;

typedef struct OraclePLSQLParser_while_loop_statement_sub_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_while_loop_statement_sub_return;

typedef struct OraclePLSQLParser_pipe_row_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_pipe_row_statement_return;

typedef struct OraclePLSQLParser_pipe_row_statement_sub_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_pipe_row_statement_sub_return;

typedef struct OraclePLSQLParser_null_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_null_statement_return;

typedef struct OraclePLSQLParser_open_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_open_statement_return;

typedef struct OraclePLSQLParser_open_statement_sub_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_open_statement_sub_return;

typedef struct OraclePLSQLParser_pragma_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_pragma_return;

typedef struct OraclePLSQLParser_raise_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_raise_statement_return;

typedef struct OraclePLSQLParser_raise_statement_sub_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_raise_statement_sub_return;

typedef struct OraclePLSQLParser_return_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_return_statement_return;

typedef struct OraclePLSQLParser_return_statement_sub_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_return_statement_sub_return;

typedef struct OraclePLSQLParser_declare_block_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_declare_block_return;

typedef struct OraclePLSQLParser_body_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_body_return;

typedef struct OraclePLSQLParser_exception_handler_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_exception_handler_return;

typedef struct OraclePLSQLParser_exception_handler_sub_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_exception_handler_sub_return;

typedef struct OraclePLSQLParser_plsql_block_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_plsql_block_return;

typedef struct OraclePLSQLParser_label_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_label_return;

typedef struct OraclePLSQLParser_qual_id_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_qual_id_return;

typedef struct OraclePLSQLParser_schema_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_schema_name_return;

typedef struct OraclePLSQLParser_object_attribute_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_object_attribute_name_return;

typedef struct OraclePLSQLParser_cursor_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_cursor_name_return;

typedef struct OraclePLSQLParser_variable_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_variable_name_return;

typedef struct OraclePLSQLParser_variable_name_ex_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_variable_name_ex_return;

typedef struct OraclePLSQLParser_parameter_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_parameter_name_return;

typedef struct OraclePLSQLParser_column_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_column_name_return;

typedef struct OraclePLSQLParser_procedure_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_procedure_name_return;

typedef struct OraclePLSQLParser_exception_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_exception_name_return;

typedef struct OraclePLSQLParser_package_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_package_name_return;

typedef struct OraclePLSQLParser_identifier_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_identifier_return;

typedef struct OraclePLSQLParser_sql_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_sql_statement_return;

typedef struct OraclePLSQLParser_commit_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_commit_statement_return;

typedef struct OraclePLSQLParser_delete_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_delete_statement_return;

typedef struct OraclePLSQLParser_insert_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_insert_statement_return;

typedef struct OraclePLSQLParser_lock_table_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_lock_table_statement_return;

typedef struct OraclePLSQLParser_rollback_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_rollback_statement_return;

typedef struct OraclePLSQLParser_savepoint_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_savepoint_statement_return;

typedef struct OraclePLSQLParser_select_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_select_statement_return;

typedef struct OraclePLSQLParser_merge_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_merge_statement_return;

typedef struct OraclePLSQLParser_set_transaction_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_set_transaction_statement_return;

typedef struct OraclePLSQLParser_update_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_update_statement_return;

typedef struct OraclePLSQLParser_swallow_to_semi_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_swallow_to_semi_return;

typedef struct OraclePLSQLParser_label_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_label_name_return;

typedef struct OraclePLSQLParser_dblink_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_dblink_name_return;

typedef struct OraclePLSQLParser_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_expression_return;

typedef struct OraclePLSQLParser_or_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_or_expr_return;

typedef struct OraclePLSQLParser_and_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_and_expr_return;

typedef struct OraclePLSQLParser_not_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_not_expr_return;

typedef struct OraclePLSQLParser_compare_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_compare_expr_return;

typedef struct OraclePLSQLParser_is_null_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_is_null_expr_return;

typedef struct OraclePLSQLParser_like_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_like_expr_return;

typedef struct OraclePLSQLParser_between_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_between_expr_return;

typedef struct OraclePLSQLParser_in_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_in_expr_return;

typedef struct OraclePLSQLParser_numeric_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_numeric_expression_return;

typedef struct OraclePLSQLParser_add_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_add_expr_return;

typedef struct OraclePLSQLParser_mul_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_mul_expr_return;

typedef struct OraclePLSQLParser_unary_sign_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_unary_sign_expr_return;

typedef struct OraclePLSQLParser_atom_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_atom_return;

typedef struct OraclePLSQLParser_variable_or_function_call_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_variable_or_function_call_return;

typedef struct OraclePLSQLParser_timestamp_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_timestamp_expression_return;

typedef struct OraclePLSQLParser_cast_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_cast_expression_return;

typedef struct OraclePLSQLParser_extract_datetime_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_extract_datetime_expression_return;

typedef struct OraclePLSQLParser_attribute_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_attribute_return;

typedef struct OraclePLSQLParser_call_args_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_call_args_return;

typedef struct OraclePLSQLParser_boolean_atom_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_boolean_atom_return;

typedef struct OraclePLSQLParser_numeric_atom_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_numeric_atom_return;

typedef struct OraclePLSQLParser_numeric_literal_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_numeric_literal_return;

typedef struct OraclePLSQLParser_boolean_literal_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_boolean_literal_return;

typedef struct OraclePLSQLParser_string_literal_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_string_literal_return;

typedef struct OraclePLSQLParser_collection_exists_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_collection_exists_return;

typedef struct OraclePLSQLParser_conditional_predicate_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_conditional_predicate_return;

typedef struct OraclePLSQLParser_parameter_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_parameter_return;

typedef struct OraclePLSQLParser_create_package_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_create_package_return;

typedef struct OraclePLSQLParser_create_package_body_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_create_package_body_return;

typedef struct OraclePLSQLParser_create_procedure_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_create_procedure_return;

typedef struct OraclePLSQLParser_create_function_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_create_function_return;

typedef struct OraclePLSQLParser_create_trigger_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_create_trigger_return;

typedef struct OraclePLSQLParser_create_type_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_create_type_return;

typedef struct OraclePLSQLParser_invoker_rights_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_invoker_rights_clause_return;

typedef struct OraclePLSQLParser_call_spec_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_call_spec_return;

typedef struct OraclePLSQLParser_r_char_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_r_char_return;

typedef struct OraclePLSQLParser_r_from_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_r_from_return;

typedef struct OraclePLSQLParser_r_long_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_r_long_return;

typedef struct OraclePLSQLParser_r_raw_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_r_raw_return;

typedef struct OraclePLSQLParser_r_set_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_r_set_return;

typedef struct OraclePLSQLParser_r_to_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_r_to_return;

typedef struct OraclePLSQLParser_r_varchar_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_r_varchar_return;

typedef struct OraclePLSQLParser_r_varchar2_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_r_varchar2_return;

typedef struct OraclePLSQLParser_r_with_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_r_with_return;

typedef struct OraclePLSQLParser_kAT_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_kAT_return;

typedef struct OraclePLSQLParser_kERRORS_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_kERRORS_return;

typedef struct OraclePLSQLParser_kEXCEPTIONS_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_kEXCEPTIONS_return;

typedef struct OraclePLSQLParser_kFOUND_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_kFOUND_return;

typedef struct OraclePLSQLParser_kINDICES_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_kINDICES_return;

typedef struct OraclePLSQLParser_kMOD_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_kMOD_return;

typedef struct OraclePLSQLParser_kNAME_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_kNAME_return;

typedef struct OraclePLSQLParser_kOF_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_kOF_return;

typedef struct OraclePLSQLParser_kREPLACE_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_kREPLACE_return;

typedef struct OraclePLSQLParser_kSAVE_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_kSAVE_return;

typedef struct OraclePLSQLParser_kSHOW_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_kSHOW_return;

typedef struct OraclePLSQLParser_kVALUES_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_kVALUES_return;

typedef struct OraclePLSQLParser_kBYTE_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_kBYTE_return;

typedef struct OraclePLSQLParser_kDAY_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_kDAY_return;

typedef struct OraclePLSQLParser_kMONTH_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_kMONTH_return;

typedef struct OraclePLSQLParser_kSECOND_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_kSECOND_return;

typedef struct OraclePLSQLParser_kYEAR_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_kYEAR_return;

typedef struct OraclePLSQLParser_kLOCAL_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_kLOCAL_return;

typedef struct OraclePLSQLParser_kZONE_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_kZONE_return;

typedef struct OraclePLSQLParser_kTIME_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_kTIME_return;

typedef struct OraclePLSQLParser_k_aggregate_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_aggregate_return;

typedef struct OraclePLSQLParser_k_and_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_and_return;

typedef struct OraclePLSQLParser_k_array_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_array_return;

typedef struct OraclePLSQLParser_k_as_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_as_return;

typedef struct OraclePLSQLParser_k_authid_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_authid_return;

typedef struct OraclePLSQLParser_k_between_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_between_return;

typedef struct OraclePLSQLParser_k_body_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_body_return;

typedef struct OraclePLSQLParser_k_bulk_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_bulk_return;

typedef struct OraclePLSQLParser_k_by_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_by_return;

typedef struct OraclePLSQLParser_k_case_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_case_return;

typedef struct OraclePLSQLParser_k_character_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_character_return;

typedef struct OraclePLSQLParser_k_create_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_create_return;

typedef struct OraclePLSQLParser_k_collect_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_collect_return;

typedef struct OraclePLSQLParser_k_commit_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_commit_return;

typedef struct OraclePLSQLParser_k_current_user_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_current_user_return;

typedef struct OraclePLSQLParser_k_date_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_date_return;

typedef struct OraclePLSQLParser_k_default_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_default_return;

typedef struct OraclePLSQLParser_k_definer_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_definer_return;

typedef struct OraclePLSQLParser_k_delete_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_delete_return;

typedef struct OraclePLSQLParser_k_else_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_else_return;

typedef struct OraclePLSQLParser_k_elsif_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_elsif_return;

typedef struct OraclePLSQLParser_k_external_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_external_return;

typedef struct OraclePLSQLParser_k_false_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_false_return;

typedef struct OraclePLSQLParser_k_fetch_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_fetch_return;

typedef struct OraclePLSQLParser_k_for_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_for_return;

typedef struct OraclePLSQLParser_k_forall_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_forall_return;

typedef struct OraclePLSQLParser_k_goto_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_goto_return;

typedef struct OraclePLSQLParser_k_if_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_if_return;

typedef struct OraclePLSQLParser_k_index_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_index_return;

typedef struct OraclePLSQLParser_k_insert_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_insert_return;

typedef struct OraclePLSQLParser_k_into_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_into_return;

typedef struct OraclePLSQLParser_k_is_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_is_return;

typedef struct OraclePLSQLParser_k_language_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_language_return;

typedef struct OraclePLSQLParser_k_like_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_like_return;

typedef struct OraclePLSQLParser_k_limit_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_limit_return;

typedef struct OraclePLSQLParser_k_lock_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_lock_return;

typedef struct OraclePLSQLParser_k_nchar_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_nchar_return;

typedef struct OraclePLSQLParser_k_not_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_not_return;

typedef struct OraclePLSQLParser_k_null_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_null_return;

typedef struct OraclePLSQLParser_k_open_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_open_return;

typedef struct OraclePLSQLParser_k_or_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_or_return;

typedef struct OraclePLSQLParser_k_package_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_package_return;

typedef struct OraclePLSQLParser_k_raise_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_raise_return;

typedef struct OraclePLSQLParser_k_rollback_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_rollback_return;

typedef struct OraclePLSQLParser_k_savepoint_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_savepoint_return;

typedef struct OraclePLSQLParser_k_select_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_select_return;

typedef struct OraclePLSQLParser_k_sql_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_sql_return;

typedef struct OraclePLSQLParser_k_table_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_table_return;

typedef struct OraclePLSQLParser_k_timestamp_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_timestamp_return;

typedef struct OraclePLSQLParser_k_transaction_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_transaction_return;

typedef struct OraclePLSQLParser_k_trigger_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_trigger_return;

typedef struct OraclePLSQLParser_k_true_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_true_return;

typedef struct OraclePLSQLParser_k_then_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_then_return;

typedef struct OraclePLSQLParser_k_type_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_type_return;

typedef struct OraclePLSQLParser_k_update_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_update_return;

typedef struct OraclePLSQLParser_k_while_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_while_return;

typedef struct OraclePLSQLParser_k_inserting_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_inserting_return;

typedef struct OraclePLSQLParser_k_updating_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_updating_return;

typedef struct OraclePLSQLParser_k_deleting_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_deleting_return;

typedef struct OraclePLSQLParser_k_exists_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_exists_return;

typedef struct OraclePLSQLParser_k_begin_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_begin_return;

typedef struct OraclePLSQLParser_k_call_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_call_return;

typedef struct OraclePLSQLParser_k_cast_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_cast_return;

typedef struct OraclePLSQLParser_k_clob_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_clob_return;

typedef struct OraclePLSQLParser_k_close_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_close_return;

typedef struct OraclePLSQLParser_k_constant_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_constant_return;

typedef struct OraclePLSQLParser_k_continue_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_continue_return;

typedef struct OraclePLSQLParser_k_cursor_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_cursor_return;

typedef struct OraclePLSQLParser_k_declare_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_declare_return;

typedef struct OraclePLSQLParser_k_deterministic_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_deterministic_return;

typedef struct OraclePLSQLParser_k_end_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_end_return;

typedef struct OraclePLSQLParser_k_escape_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_escape_return;

typedef struct OraclePLSQLParser_k_exception_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_exception_return;

typedef struct OraclePLSQLParser_k_execute_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_execute_return;

typedef struct OraclePLSQLParser_k_exit_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_exit_return;

typedef struct OraclePLSQLParser_k_function_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_function_return;

typedef struct OraclePLSQLParser_k_immediate_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_immediate_return;

typedef struct OraclePLSQLParser_k_interval_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_interval_return;

typedef struct OraclePLSQLParser_k_loop_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_loop_return;

typedef struct OraclePLSQLParser_k_merge_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_merge_return;

typedef struct OraclePLSQLParser_k_national_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_national_return;

typedef struct OraclePLSQLParser_k_nocopy_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_nocopy_return;

typedef struct OraclePLSQLParser_k_others_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_others_return;

typedef struct OraclePLSQLParser_k_parallel_enable_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_parallel_enable_return;

typedef struct OraclePLSQLParser_k_pipe_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_pipe_return;

typedef struct OraclePLSQLParser_k_pipelined_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_pipelined_return;

typedef struct OraclePLSQLParser_k_pragma_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_pragma_return;

typedef struct OraclePLSQLParser_k_procedure_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_procedure_return;

typedef struct OraclePLSQLParser_k_record_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_record_return;

typedef struct OraclePLSQLParser_k_ref_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_ref_return;

typedef struct OraclePLSQLParser_k_result_cache_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_result_cache_return;

typedef struct OraclePLSQLParser_k_return_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_return_return;

typedef struct OraclePLSQLParser_k_returning_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_returning_return;

typedef struct OraclePLSQLParser_k_row_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_row_return;

typedef struct OraclePLSQLParser_k_rowtype_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_rowtype_return;

typedef struct OraclePLSQLParser_k_systimestamp_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_systimestamp_return;

typedef struct OraclePLSQLParser_k_subtype_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_subtype_return;

typedef struct OraclePLSQLParser_k_varray_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_varray_return;

typedef struct OraclePLSQLParser_k_varying_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_varying_return;

typedef struct OraclePLSQLParser_k_when_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_k_when_return;

typedef struct OraclePLSQLParser_quoted_string_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_quoted_string_return;

typedef struct OraclePLSQLParser_bindvar_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_bindvar_return;

typedef struct OraclePLSQLParser_doublevertbar_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_doublevertbar_return;

typedef struct OraclePLSQLParser_not_equal_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_not_equal_return;

typedef struct OraclePLSQLParser_leq_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_leq_return;

typedef struct OraclePLSQLParser_geq_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_geq_return;

typedef struct OraclePLSQLParser_type_attr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_type_attr_return;

typedef struct OraclePLSQLParser_rowtype_attr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_rowtype_attr_return;

typedef struct OraclePLSQLParser_notfound_attr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_notfound_attr_return;

typedef struct OraclePLSQLParser_found_attr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_found_attr_return;

typedef struct OraclePLSQLParser_isopen_attr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_isopen_attr_return;

typedef struct OraclePLSQLParser_rowcount_attr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_rowcount_attr_return;

typedef struct OraclePLSQLParser_bulk_rowcount_attr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_bulk_rowcount_attr_return;

typedef struct OraclePLSQLParser_charset_attr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;
   
}
    OraclePLSQLParser_charset_attr_return;



/** Context tracking structure for OraclePLSQLParser
 */
struct OraclePLSQLParser_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_PARSER   pParser;


     OraclePLSQLParser_start_rule_return (*start_rule)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_sqlplus_file_return (*sqlplus_file)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_show_errors_return (*show_errors)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_create_object_return (*create_object)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_procedure_heading_return (*procedure_heading)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_function_heading_return (*function_heading)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_parameter_declarations_return (*parameter_declarations)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_parameter_declaration_return (*parameter_declaration)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_declare_section_return (*declare_section)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_type_definition_sub_return (*type_definition_sub)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_type_definition_return (*type_definition)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_subtype_definition_sub_return (*subtype_definition_sub)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_subtype_definition_return (*subtype_definition)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_cursor_definition_sub_return (*cursor_definition_sub)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_cursor_definition_return (*cursor_definition)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_item_declaration_return (*item_declaration)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_variable_declaration_return (*variable_declaration)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_constant_declaration_return (*constant_declaration)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_exception_declaration_return (*exception_declaration)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_record_type_definition_return (*record_type_definition)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_record_field_declaration_return (*record_field_declaration)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_collection_type_definition_return (*collection_type_definition)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_varray_type_definition_return (*varray_type_definition)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_nested_table_type_definition_return (*nested_table_type_definition)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_associative_index_type_return (*associative_index_type)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_ref_cursor_type_definition_return (*ref_cursor_type_definition)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_datatype_name_return (*datatype_name)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_datatype_return (*datatype)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_function_declaration_or_definition_return (*function_declaration_or_definition)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_function_declaration_or_definition_sub_return (*function_declaration_or_definition_sub)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_procedure_declaration_or_definition_return (*procedure_declaration_or_definition)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_procedure_declaration_or_definition_sub_return (*procedure_declaration_or_definition_sub)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_statement_return (*statement)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_lvalue_return (*lvalue)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_assign_or_call_statement_return (*assign_or_call_statement)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_call_first_return (*call_first)	(struct OraclePLSQLParser_Ctx_struct * ctx, int usageType);
     OraclePLSQLParser_call_next_return (*call_next)	(struct OraclePLSQLParser_Ctx_struct * ctx, int usageType);
     OraclePLSQLParser_delete_call_return (*delete_call)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_basic_loop_statement_return (*basic_loop_statement)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_basic_loop_statement_sub_return (*basic_loop_statement_sub)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_case_statement_return (*case_statement)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_case_statement_sub_return (*case_statement_sub)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_close_statement_return (*close_statement)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_close_statement_sub_return (*close_statement_sub)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_continue_statement_return (*continue_statement)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_continue_statement_sub_return (*continue_statement_sub)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_execute_immediate_statement_return (*execute_immediate_statement)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_execute_immediate_statement_sub_return (*execute_immediate_statement_sub)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_exit_statement_return (*exit_statement)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_exit_statement_sub_return (*exit_statement_sub)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_fetch_statement_return (*fetch_statement)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_fetch_statement_sub_return (*fetch_statement_sub)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_into_clause_return (*into_clause)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_bulk_collect_into_clause_return (*bulk_collect_into_clause)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_using_clause_return (*using_clause)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_param_modifiers_return (*param_modifiers)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_dynamic_returning_clause_return (*dynamic_returning_clause)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_for_loop_statement_return (*for_loop_statement)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_for_loop_statement_sub_return (*for_loop_statement_sub)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_forall_statement_return (*forall_statement)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_forall_statement_sub_return (*forall_statement_sub)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_bounds_clause_return (*bounds_clause)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_goto_statement_return (*goto_statement)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_if_statement_return (*if_statement)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_if_statement_if_return (*if_statement_if)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_if_statement_elsif_return (*if_statement_elsif)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_if_statement_else_return (*if_statement_else)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_if_statement_end_return (*if_statement_end)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_while_loop_statement_return (*while_loop_statement)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_while_loop_statement_sub_return (*while_loop_statement_sub)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_pipe_row_statement_return (*pipe_row_statement)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_pipe_row_statement_sub_return (*pipe_row_statement_sub)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_null_statement_return (*null_statement)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_open_statement_return (*open_statement)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_open_statement_sub_return (*open_statement_sub)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_pragma_return (*pragma)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_raise_statement_return (*raise_statement)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_raise_statement_sub_return (*raise_statement_sub)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_return_statement_return (*return_statement)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_return_statement_sub_return (*return_statement_sub)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_declare_block_return (*declare_block)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_body_return (*body)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_exception_handler_return (*exception_handler)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_exception_handler_sub_return (*exception_handler_sub)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_plsql_block_return (*plsql_block)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_label_return (*label)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_qual_id_return (*qual_id)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_schema_name_return (*schema_name)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_object_attribute_name_return (*object_attribute_name)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_cursor_name_return (*cursor_name)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_variable_name_return (*variable_name)	(struct OraclePLSQLParser_Ctx_struct * ctx, int usageType);
     OraclePLSQLParser_variable_name_ex_return (*variable_name_ex)	(struct OraclePLSQLParser_Ctx_struct * ctx, int usageType);
     OraclePLSQLParser_parameter_name_return (*parameter_name)	(struct OraclePLSQLParser_Ctx_struct * ctx, int usageType);
     OraclePLSQLParser_column_name_return (*column_name)	(struct OraclePLSQLParser_Ctx_struct * ctx, int usageType);
     OraclePLSQLParser_procedure_name_return (*procedure_name)	(struct OraclePLSQLParser_Ctx_struct * ctx, int usageType);
     OraclePLSQLParser_exception_name_return (*exception_name)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_package_name_return (*package_name)	(struct OraclePLSQLParser_Ctx_struct * ctx, int usageType);
     OraclePLSQLParser_identifier_return (*identifier)	(struct OraclePLSQLParser_Ctx_struct * ctx, int identifierClass, int usageType);
     OraclePLSQLParser_sql_statement_return (*sql_statement)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_commit_statement_return (*commit_statement)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_delete_statement_return (*delete_statement)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_insert_statement_return (*insert_statement)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_lock_table_statement_return (*lock_table_statement)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_rollback_statement_return (*rollback_statement)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_savepoint_statement_return (*savepoint_statement)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_select_statement_return (*select_statement)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_merge_statement_return (*merge_statement)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_set_transaction_statement_return (*set_transaction_statement)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_update_statement_return (*update_statement)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_swallow_to_semi_return (*swallow_to_semi)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_label_name_return (*label_name)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_dblink_name_return (*dblink_name)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_expression_return (*expression)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_or_expr_return (*or_expr)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_and_expr_return (*and_expr)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_not_expr_return (*not_expr)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_compare_expr_return (*compare_expr)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_is_null_expr_return (*is_null_expr)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_like_expr_return (*like_expr)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_between_expr_return (*between_expr)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_in_expr_return (*in_expr)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_numeric_expression_return (*numeric_expression)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_add_expr_return (*add_expr)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_mul_expr_return (*mul_expr)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_unary_sign_expr_return (*unary_sign_expr)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_atom_return (*atom)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_variable_or_function_call_return (*variable_or_function_call)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_timestamp_expression_return (*timestamp_expression)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_cast_expression_return (*cast_expression)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_extract_datetime_expression_return (*extract_datetime_expression)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_attribute_return (*attribute)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_call_args_return (*call_args)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_boolean_atom_return (*boolean_atom)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_numeric_atom_return (*numeric_atom)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_numeric_literal_return (*numeric_literal)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_boolean_literal_return (*boolean_literal)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_string_literal_return (*string_literal)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_collection_exists_return (*collection_exists)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_conditional_predicate_return (*conditional_predicate)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_parameter_return (*parameter)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_create_package_return (*create_package)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_create_package_body_return (*create_package_body)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_create_procedure_return (*create_procedure)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_create_function_return (*create_function)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_create_trigger_return (*create_trigger)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_create_type_return (*create_type)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_invoker_rights_clause_return (*invoker_rights_clause)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_call_spec_return (*call_spec)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_r_char_return (*r_char)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_r_from_return (*r_from)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_r_long_return (*r_long)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_r_raw_return (*r_raw)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_r_set_return (*r_set)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_r_to_return (*r_to)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_r_varchar_return (*r_varchar)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_r_varchar2_return (*r_varchar2)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_r_with_return (*r_with)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_kAT_return (*kAT)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_kERRORS_return (*kERRORS)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_kEXCEPTIONS_return (*kEXCEPTIONS)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_kFOUND_return (*kFOUND)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_kINDICES_return (*kINDICES)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_kMOD_return (*kMOD)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_kNAME_return (*kNAME)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_kOF_return (*kOF)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_kREPLACE_return (*kREPLACE)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_kSAVE_return (*kSAVE)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_kSHOW_return (*kSHOW)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_kVALUES_return (*kVALUES)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_kBYTE_return (*kBYTE)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_kDAY_return (*kDAY)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_kMONTH_return (*kMONTH)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_kSECOND_return (*kSECOND)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_kYEAR_return (*kYEAR)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_kLOCAL_return (*kLOCAL)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_kZONE_return (*kZONE)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_kTIME_return (*kTIME)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_aggregate_return (*k_aggregate)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_and_return (*k_and)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_array_return (*k_array)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_as_return (*k_as)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_authid_return (*k_authid)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_between_return (*k_between)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_body_return (*k_body)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_bulk_return (*k_bulk)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_by_return (*k_by)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_case_return (*k_case)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_character_return (*k_character)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_create_return (*k_create)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_collect_return (*k_collect)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_commit_return (*k_commit)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_current_user_return (*k_current_user)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_date_return (*k_date)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_default_return (*k_default)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_definer_return (*k_definer)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_delete_return (*k_delete)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_else_return (*k_else)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_elsif_return (*k_elsif)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_external_return (*k_external)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_false_return (*k_false)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_fetch_return (*k_fetch)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_for_return (*k_for)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_forall_return (*k_forall)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_goto_return (*k_goto)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_if_return (*k_if)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_index_return (*k_index)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_insert_return (*k_insert)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_into_return (*k_into)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_is_return (*k_is)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_language_return (*k_language)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_like_return (*k_like)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_limit_return (*k_limit)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_lock_return (*k_lock)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_nchar_return (*k_nchar)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_not_return (*k_not)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_null_return (*k_null)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_open_return (*k_open)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_or_return (*k_or)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_package_return (*k_package)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_raise_return (*k_raise)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_rollback_return (*k_rollback)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_savepoint_return (*k_savepoint)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_select_return (*k_select)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_sql_return (*k_sql)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_table_return (*k_table)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_timestamp_return (*k_timestamp)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_transaction_return (*k_transaction)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_trigger_return (*k_trigger)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_true_return (*k_true)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_then_return (*k_then)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_type_return (*k_type)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_update_return (*k_update)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_while_return (*k_while)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_inserting_return (*k_inserting)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_updating_return (*k_updating)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_deleting_return (*k_deleting)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_exists_return (*k_exists)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_begin_return (*k_begin)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_call_return (*k_call)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_cast_return (*k_cast)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_clob_return (*k_clob)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_close_return (*k_close)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_constant_return (*k_constant)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_continue_return (*k_continue)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_cursor_return (*k_cursor)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_declare_return (*k_declare)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_deterministic_return (*k_deterministic)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_end_return (*k_end)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_escape_return (*k_escape)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_exception_return (*k_exception)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_execute_return (*k_execute)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_exit_return (*k_exit)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_function_return (*k_function)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_immediate_return (*k_immediate)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_interval_return (*k_interval)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_loop_return (*k_loop)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_merge_return (*k_merge)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_national_return (*k_national)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_nocopy_return (*k_nocopy)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_others_return (*k_others)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_parallel_enable_return (*k_parallel_enable)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_pipe_return (*k_pipe)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_pipelined_return (*k_pipelined)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_pragma_return (*k_pragma)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_procedure_return (*k_procedure)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_record_return (*k_record)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_ref_return (*k_ref)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_result_cache_return (*k_result_cache)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_return_return (*k_return)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_returning_return (*k_returning)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_row_return (*k_row)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_rowtype_return (*k_rowtype)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_systimestamp_return (*k_systimestamp)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_subtype_return (*k_subtype)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_varray_return (*k_varray)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_varying_return (*k_varying)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_k_when_return (*k_when)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_quoted_string_return (*quoted_string)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_bindvar_return (*bindvar)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_doublevertbar_return (*doublevertbar)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_not_equal_return (*not_equal)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_leq_return (*leq)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_geq_return (*geq)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_type_attr_return (*type_attr)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_rowtype_attr_return (*rowtype_attr)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_notfound_attr_return (*notfound_attr)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_found_attr_return (*found_attr)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_isopen_attr_return (*isopen_attr)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_rowcount_attr_return (*rowcount_attr)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_bulk_rowcount_attr_return (*bulk_rowcount_attr)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     OraclePLSQLParser_charset_attr_return (*charset_attr)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred9_OraclePLSQL)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred13_OraclePLSQL)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred17_OraclePLSQL)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred21_OraclePLSQL)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred25_OraclePLSQL)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred26_OraclePLSQL)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred75_OraclePLSQL)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred77_OraclePLSQL)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred118_OraclePLSQL)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred121_OraclePLSQL)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred126_OraclePLSQL)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred131_OraclePLSQL)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred157_OraclePLSQL)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred158_OraclePLSQL)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred159_OraclePLSQL)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred160_OraclePLSQL)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred161_OraclePLSQL)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred162_OraclePLSQL)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred163_OraclePLSQL)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred164_OraclePLSQL)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred165_OraclePLSQL)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred166_OraclePLSQL)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred168_OraclePLSQL)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred169_OraclePLSQL)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred170_OraclePLSQL)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred171_OraclePLSQL)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred172_OraclePLSQL)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred173_OraclePLSQL)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred174_OraclePLSQL)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred175_OraclePLSQL)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred186_OraclePLSQL)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred187_OraclePLSQL)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred188_OraclePLSQL)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred189_OraclePLSQL)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred194_OraclePLSQL)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred198_OraclePLSQL)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred200_OraclePLSQL)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred205_OraclePLSQL)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred208_OraclePLSQL)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred225_OraclePLSQL)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred226_OraclePLSQL)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred228_OraclePLSQL)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred238_OraclePLSQL)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred240_OraclePLSQL)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred249_OraclePLSQL)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred253_OraclePLSQL)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred270_OraclePLSQL)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred319_OraclePLSQL)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred320_OraclePLSQL)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred325_OraclePLSQL)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred326_OraclePLSQL)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred351_OraclePLSQL)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred354_OraclePLSQL)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred355_OraclePLSQL)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred365_OraclePLSQL)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred369_OraclePLSQL)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred370_OraclePLSQL)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred441_OraclePLSQL)	(struct OraclePLSQLParser_Ctx_struct * ctx);
     ANTLR3_BOOLEAN (*synpred446_OraclePLSQL)	(struct OraclePLSQLParser_Ctx_struct * ctx);
    // Delegated rules

    const char * (*getGrammarFileName)();
    void            (*reset)  (struct OraclePLSQLParser_Ctx_struct * ctx);
    void	    (*free)   (struct OraclePLSQLParser_Ctx_struct * ctx);
    /* @headerFile.members() */
    pANTLR3_BASE_TREE_ADAPTOR	adaptor;
    pANTLR3_VECTOR_FACTORY		vectors;
    /* End @headerFile.members() */
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pOraclePLSQLParser OraclePLSQLParserNew         (pANTLR3_COMMON_TOKEN_STREAM instream);
ANTLR3_API pOraclePLSQLParser OraclePLSQLParserNewSSD      (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the parser will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif 
#define EOF      -1
#define T__126      126
#define T__127      127
#define T__128      128
#define T__129      129
#define T__130      130
#define T__131      131
#define T__132      132
#define T__133      133
#define T__134      134
#define T__135      135
#define T__136      136
#define T__137      137
#define T__138      138
#define T__139      139
#define T__140      140
#define T__141      141
#define T__142      142
#define T__143      143
#define T__144      144
#define T__145      145
#define T__146      146
#define T__147      147
#define T__148      148
#define T__149      149
#define T__150      150
#define T__151      151
#define T__152      152
#define T__153      153
#define T__154      154
#define T__155      155
#define T__156      156
#define T__157      157
#define T__158      158
#define T__159      159
#define T__160      160
#define T__161      161
#define T__162      162
#define T__163      163
#define T__164      164
#define T__165      165
#define T__166      166
#define T__167      167
#define T__168      168
#define T__169      169
#define T__170      170
#define T__171      171
#define T__172      172
#define T__173      173
#define T__174      174
#define T__175      175
#define T__176      176
#define T__177      177
#define T__178      178
#define T__179      179
#define T__180      180
#define T__181      181
#define T__182      182
#define T__183      183
#define T__184      184
#define T__185      185
#define T__186      186
#define T__187      187
#define T__188      188
#define T__189      189
#define T__190      190
#define T__191      191
#define T__192      192
#define T__193      193
#define T__194      194
#define T__195      195
#define T__196      196
#define T__197      197
#define T__198      198
#define T__199      199
#define T__200      200
#define T__201      201
#define T__202      202
#define T__203      203
#define T__204      204
#define T__205      205
#define T__206      206
#define T__207      207
#define T__208      208
#define T__209      209
#define T__210      210
#define T__211      211
#define T__212      212
#define T__213      213
#define T__214      214
#define T__215      215
#define T__216      216
#define T__217      217
#define T__218      218
#define T__219      219
#define T__220      220
#define T__221      221
#define T__222      222
#define T__223      223
#define T__224      224
#define T__225      225
#define T__226      226
#define T__227      227
#define T__228      228
#define T__229      229
#define T__230      230
#define T__231      231
#define T__232      232
#define T__233      233
#define T__234      234
#define T__235      235
#define T__236      236
#define T__237      237
#define T__238      238
#define T__239      239
#define T__240      240
#define T__241      241
#define T__242      242
#define T__243      243
#define T_UNKNOWN      4
#define T_RESERVED      5
#define T_SCHEMA_NAME      6
#define T_TRIGGER_NAME      7
#define T_PACKAGE_NAME      8
#define T_FUNCTION_NAME      9
#define T_PROCEDURE_NAME      10
#define T_PARAMETER_NAME      11
#define T_BINDVAR_NAME      12
#define T_VARIABLE_NAME      13
#define T_DATATYPE_NAME      14
#define T_CURSOR_NAME      15
#define T_TABLE_NAME      16
#define T_COLUMN_NAME      17
#define T_OBJECT_NAME      18
#define T_LABEL_NAME      19
#define T_EXCEPTION_NAME      20
#define T_DBLINK_NAME      21
#define T_DECL      22
#define T_USE      23
#define T_USEL      24
#define T_TYPE_DECL      25
#define T_SUBTYPE_DECL      26
#define T_CURSOR_DECL      27
#define T_VAR_DECL      28
#define T_CONST_DECL      29
#define T_EXC_DECL      30
#define T_FUNCTION_DECL      31
#define T_PROCEDURE_DECL      32
#define T_PRAGMA_DECL      33
#define T_DECL_BLOCK      34
#define T_BLOCK_BLOCK      35
#define T_PROCEDURE_BLOCK      36
#define T_FUNCTION_BLOCK      37
#define T_DECLARE_BLOCK      38
#define T_BEGIN_BLOCK      39
#define T_EXCEPTIONS_BLOCK      40
#define T_COMMIT      41
#define T_DELETE      42
#define T_INSERT      43
#define T_LOCK_TABLE      44
#define T_MERGE      45
#define T_ROLLBACK      46
#define T_SAVEPOINT      47
#define T_SELECT      48
#define T_SET_TRANSACTION      49
#define T_UPDATE      50
#define T_EXECUTE_IMMEDIATE      51
#define T_CASE      52
#define T_OPEN      53
#define T_CLOSE      54
#define T_CONTINUE      55
#define T_PIPE      56
#define T_GOTO      57
#define T_EXIT      58
#define T_RETURN      59
#define T_DECLARE      60
#define T_RAISE      61
#define T_FETCH      62
#define T_LOOP      63
#define T_WHILE      64
#define T_NULL_STAT      65
#define T_FOR      66
#define T_FORALL      67
#define T_IF      68
#define T_ELSIF      69
#define T_ELSE      70
#define T_ENDIF      71
#define T_ASSIGN      72
#define T_CALL      73
#define T_DECLARATION      74
#define T_STATEMENT      75
#define DIVIDE      76
#define SEMI      77
#define LPAREN      78
#define COMMA      79
#define RPAREN      80
#define K_IN      81
#define K_OUT      82
#define ASSIGN      83
#define ID      84
#define INTEGER      85
#define DOT      86
#define K_USING      87
#define DOUBLEDOT      88
#define LLABEL      89
#define RLABEL      90
#define COLON      91
#define AT_SIGN      92
#define EQ      93
#define LTH      94
#define GTH      95
#define MINUS      96
#define PLUS      97
#define DOUBLEVERTBAR      98
#define ASTERISK      99
#define REAL_NUMBER      100
#define QUOTED_STRING      101
#define ARROW      102
#define QSTRING      103
#define QS_ANGLE      104
#define QS_BRACE      105
#define QS_BRACK      106
#define QS_PAREN      107
#define QS_OTHER      108
#define QUOTE      109
#define QS_OTHER_CH      110
#define BINDVAR      111
#define DOUBLEQUOTED_STRING      112
#define NUM      113
#define POINT      114
#define RBRACK      115
#define LBRACK      116
#define PERCENT      117
#define VERTBAR      118
#define NOT_EQ      119
#define LEQ      120
#define GEQ      121
#define NUMBER_VALUE      122
#define WS      123
#define SL_COMMENT      124
#define ML_COMMENT      125
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for OraclePLSQLParser
 * =============================================================================
 */
/** \} */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
