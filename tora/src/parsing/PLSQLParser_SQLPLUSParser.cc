/** \file
 *  This C++ source file was generated by $ANTLR version 3.5.1-SNAPSHOT
 *
 *     -  From the grammar source file : SQLPLUSParser.g
 *     -                            On : 2013-06-21 14:01:34
 *     -                for the parser : PLSQLParser_SQLPLUSParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C++ language generator and runtime by Gokulakannan Somasundaram ( heavy lifting from C Run-time by Jim Idle )
 *
 *
*/
// [The "BSD license"]
// Copyright (c) 2005-2009 Gokulakannan Somasundaram, ElectronDB
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


/* =============================================================================
 * This is what the grammar programmer asked us to put at the top of every file.
 */

/**
 * Oracle(c) PL/SQL 11g Parser  
 *
 * Copyright (c) 2009-2011 Alexandre Porcelli <alexandre.porcelli@gmail.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* End of Header action.
 * =============================================================================
 */

/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#include    "PLSQLParser_SQLPLUSParser.hpp"
// Include delegator definition header files
//
#include "PLSQLParser.hpp" 

/* ----------------------------------------- */

/**
 * Oracle(c) SQL*Plus 11g Parser
 *
 * Copyright (c) 2009-2011 Alexandre Porcelli <alexandre.porcelli@gmail.com>
 *                         Tomi Pakarinen <tomi.pakarinen@iki.fi>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* ============================================================================= */

/* =============================================================================
 * Start of recognizer
 */

namespace 
         User
 {
using namespace antlr3;

/** \brief Name of the grammar file that generated this code
 */
static const char fileName[] = "SQLPLUSParser.g";

/** \brief Return the name of the grammar file that generated this code.
 */
const char* PLSQLParser_SQLPLUSParser::getGrammarFileName()
{
	return fileName;
}
/** \brief Create a new PLSQLParser_SQLPLUSParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
PLSQLParser_SQLPLUSParser::PLSQLParser_SQLPLUSParser( StreamType* instream, PLSQLParser* gPLSQLParser)
    :ImplTraits::BaseParserType(ANTLR_SIZE_HINT, instream, NULL)

{
	// See if we can create a new parser with the standard constructor
	//
	this->init(instream, gPLSQLParser);
}

/** \brief Create a new PLSQLParser_SQLPLUSParser parser and return a context for it.
 *
 * \param[in] instream Pointer to an input stream interface.
 *
 * \return Pointer to new parser context upon success.
 */
PLSQLParser_SQLPLUSParser::PLSQLParser_SQLPLUSParser( StreamType* instream, RecognizerSharedStateType* state, PLSQLParser* gPLSQLParser)
    :ImplTraits::BaseParserType(ANTLR_SIZE_HINT, instream, state)

{
	this->init(instream , gPLSQLParser);
}

void PLSQLParser_SQLPLUSParser::init(StreamType* instream, PLSQLParser* gPLSQLParser)
{
     	// Install the pointers back to lexers that will delegate us to perform certain functions
     	// for them.
     	//
     		m_gPLSQLParser = gPLSQLParser;
	/* Install the token table
	*/
	this->get_psrstate()->set_tokenNames( PLSQLParserTokenNames );


}

void
PLSQLParser_SQLPLUSParser::reset()
{
    this->get_rec()->reset();
}

/** Free the parser resources
 */
PLSQLParser_SQLPLUSParser::~PLSQLParser_SQLPLUSParser()
 {
}

/** Return token names used by this parser
 *
 * The returned pointer is used as an index into the token names table (using the token
 * number as the index).
 *
 * \return Pointer to first char * in the table.
 */
static ANTLR_UINT8**	getTokenNames()
{
        return PLSQLParserTokenNames;
}


/* Declare the bitsets
 */
/** Bitset defining follow set for error recovery in rule state: PLSQLParser_SQLPLUSParser  */
static	ANTLR_BITWORD FOLLOW_SOLIDUS_in_sql_plus_command34_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000002000) };
static  PLSQLParser_SQLPLUSParserImplTraits::BitsetListType FOLLOW_SOLIDUS_in_sql_plus_command34( FOLLOW_SOLIDUS_in_sql_plus_command34_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: PLSQLParser_SQLPLUSParser  */
static	ANTLR_BITWORD FOLLOW_whenever_command_in_sql_plus_command36_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000002000) };
static  PLSQLParser_SQLPLUSParserImplTraits::BitsetListType FOLLOW_whenever_command_in_sql_plus_command36( FOLLOW_whenever_command_in_sql_plus_command36_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: PLSQLParser_SQLPLUSParser  */
static	ANTLR_BITWORD FOLLOW_exit_command_in_sql_plus_command38_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000002000) };
static  PLSQLParser_SQLPLUSParserImplTraits::BitsetListType FOLLOW_exit_command_in_sql_plus_command38( FOLLOW_exit_command_in_sql_plus_command38_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: PLSQLParser_SQLPLUSParser  */
static	ANTLR_BITWORD FOLLOW_prompt_command_in_sql_plus_command40_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000002000) };
static  PLSQLParser_SQLPLUSParserImplTraits::BitsetListType FOLLOW_prompt_command_in_sql_plus_command40( FOLLOW_prompt_command_in_sql_plus_command40_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: PLSQLParser_SQLPLUSParser  */
static	ANTLR_BITWORD FOLLOW_set_command_in_sql_plus_command42_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002), ANTLR_UINT64_LIT(0x0000000000002000) };
static  PLSQLParser_SQLPLUSParserImplTraits::BitsetListType FOLLOW_set_command_in_sql_plus_command42( FOLLOW_set_command_in_sql_plus_command42_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: PLSQLParser_SQLPLUSParser  */
static	ANTLR_BITWORD FOLLOW_SEMICOLON_in_sql_plus_command45_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  PLSQLParser_SQLPLUSParserImplTraits::BitsetListType FOLLOW_SEMICOLON_in_sql_plus_command45( FOLLOW_SEMICOLON_in_sql_plus_command45_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: PLSQLParser_SQLPLUSParser  */
static	ANTLR_BITWORD FOLLOW_whenever_key_in_whenever_command66_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000400) };
static  PLSQLParser_SQLPLUSParserImplTraits::BitsetListType FOLLOW_whenever_key_in_whenever_command66( FOLLOW_whenever_key_in_whenever_command66_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: PLSQLParser_SQLPLUSParser  */
static	ANTLR_BITWORD FOLLOW_sqlerror_key_in_whenever_command69_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000400) };
static  PLSQLParser_SQLPLUSParserImplTraits::BitsetListType FOLLOW_sqlerror_key_in_whenever_command69( FOLLOW_sqlerror_key_in_whenever_command69_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: PLSQLParser_SQLPLUSParser  */
static	ANTLR_BITWORD FOLLOW_oserror_key_in_whenever_command71_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000400) };
static  PLSQLParser_SQLPLUSParserImplTraits::BitsetListType FOLLOW_oserror_key_in_whenever_command71( FOLLOW_oserror_key_in_whenever_command71_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: PLSQLParser_SQLPLUSParser  */
static	ANTLR_BITWORD FOLLOW_exit_key_in_whenever_command75_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000400) };
static  PLSQLParser_SQLPLUSParserImplTraits::BitsetListType FOLLOW_exit_key_in_whenever_command75( FOLLOW_exit_key_in_whenever_command75_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: PLSQLParser_SQLPLUSParser  */
static	ANTLR_BITWORD FOLLOW_success_key_in_whenever_command78_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000400) };
static  PLSQLParser_SQLPLUSParserImplTraits::BitsetListType FOLLOW_success_key_in_whenever_command78( FOLLOW_success_key_in_whenever_command78_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: PLSQLParser_SQLPLUSParser  */
static	ANTLR_BITWORD FOLLOW_failure_key_in_whenever_command80_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000400) };
static  PLSQLParser_SQLPLUSParserImplTraits::BitsetListType FOLLOW_failure_key_in_whenever_command80( FOLLOW_failure_key_in_whenever_command80_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: PLSQLParser_SQLPLUSParser  */
static	ANTLR_BITWORD FOLLOW_warning_key_in_whenever_command82_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000400) };
static  PLSQLParser_SQLPLUSParserImplTraits::BitsetListType FOLLOW_warning_key_in_whenever_command82( FOLLOW_warning_key_in_whenever_command82_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: PLSQLParser_SQLPLUSParser  */
static	ANTLR_BITWORD FOLLOW_commit_key_in_whenever_command86_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  PLSQLParser_SQLPLUSParserImplTraits::BitsetListType FOLLOW_commit_key_in_whenever_command86( FOLLOW_commit_key_in_whenever_command86_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: PLSQLParser_SQLPLUSParser  */
static	ANTLR_BITWORD FOLLOW_rollback_key_in_whenever_command88_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  PLSQLParser_SQLPLUSParserImplTraits::BitsetListType FOLLOW_rollback_key_in_whenever_command88( FOLLOW_rollback_key_in_whenever_command88_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: PLSQLParser_SQLPLUSParser  */
static	ANTLR_BITWORD FOLLOW_continue_key_in_whenever_command93_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000400) };
static  PLSQLParser_SQLPLUSParserImplTraits::BitsetListType FOLLOW_continue_key_in_whenever_command93( FOLLOW_continue_key_in_whenever_command93_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: PLSQLParser_SQLPLUSParser  */
static	ANTLR_BITWORD FOLLOW_commit_key_in_whenever_command96_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  PLSQLParser_SQLPLUSParserImplTraits::BitsetListType FOLLOW_commit_key_in_whenever_command96( FOLLOW_commit_key_in_whenever_command96_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: PLSQLParser_SQLPLUSParser  */
static	ANTLR_BITWORD FOLLOW_rollback_key_in_whenever_command98_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  PLSQLParser_SQLPLUSParserImplTraits::BitsetListType FOLLOW_rollback_key_in_whenever_command98( FOLLOW_rollback_key_in_whenever_command98_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: PLSQLParser_SQLPLUSParser  */
static	ANTLR_BITWORD FOLLOW_none_key_in_whenever_command100_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  PLSQLParser_SQLPLUSParserImplTraits::BitsetListType FOLLOW_none_key_in_whenever_command100( FOLLOW_none_key_in_whenever_command100_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: PLSQLParser_SQLPLUSParser  */
static	ANTLR_BITWORD FOLLOW_set_key_in_set_command122_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000000), ANTLR_UINT64_LIT(0x0000000000000400) };
static  PLSQLParser_SQLPLUSParserImplTraits::BitsetListType FOLLOW_set_key_in_set_command122( FOLLOW_set_key_in_set_command122_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: PLSQLParser_SQLPLUSParser  */
static	ANTLR_BITWORD FOLLOW_REGULAR_ID_in_set_command124_bits[]	= { ANTLR_UINT64_LIT(0x0000000000401000), ANTLR_UINT64_LIT(0x2000000000000400) };
static  PLSQLParser_SQLPLUSParserImplTraits::BitsetListType FOLLOW_REGULAR_ID_in_set_command124( FOLLOW_REGULAR_ID_in_set_command124_bits, 2 );
/** Bitset defining follow set for error recovery in rule state: PLSQLParser_SQLPLUSParser  */
static	ANTLR_BITWORD FOLLOW_CHAR_STRING_in_set_command127_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  PLSQLParser_SQLPLUSParserImplTraits::BitsetListType FOLLOW_CHAR_STRING_in_set_command127( FOLLOW_CHAR_STRING_in_set_command127_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: PLSQLParser_SQLPLUSParser  */
static	ANTLR_BITWORD FOLLOW_on_key_in_set_command129_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  PLSQLParser_SQLPLUSParserImplTraits::BitsetListType FOLLOW_on_key_in_set_command129( FOLLOW_on_key_in_set_command129_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: PLSQLParser_SQLPLUSParser  */
static	ANTLR_BITWORD FOLLOW_off_key_in_set_command131_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  PLSQLParser_SQLPLUSParserImplTraits::BitsetListType FOLLOW_off_key_in_set_command131( FOLLOW_off_key_in_set_command131_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: PLSQLParser_SQLPLUSParser  */
static	ANTLR_BITWORD FOLLOW_EXACT_NUM_LIT_in_set_command133_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  PLSQLParser_SQLPLUSParserImplTraits::BitsetListType FOLLOW_EXACT_NUM_LIT_in_set_command133( FOLLOW_EXACT_NUM_LIT_in_set_command133_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: PLSQLParser_SQLPLUSParser  */
static	ANTLR_BITWORD FOLLOW_REGULAR_ID_in_set_command135_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  PLSQLParser_SQLPLUSParserImplTraits::BitsetListType FOLLOW_REGULAR_ID_in_set_command135( FOLLOW_REGULAR_ID_in_set_command135_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: PLSQLParser_SQLPLUSParser  */
static	ANTLR_BITWORD FOLLOW_exit_key_in_exit_command156_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  PLSQLParser_SQLPLUSParserImplTraits::BitsetListType FOLLOW_exit_key_in_exit_command156( FOLLOW_exit_key_in_exit_command156_bits, 1 );
/** Bitset defining follow set for error recovery in rule state: PLSQLParser_SQLPLUSParser  */
static	ANTLR_BITWORD FOLLOW_PROMPT_in_prompt_command177_bits[]	= { ANTLR_UINT64_LIT(0x0000000000000002) };
static  PLSQLParser_SQLPLUSParserImplTraits::BitsetListType FOLLOW_PROMPT_in_prompt_command177( FOLLOW_PROMPT_in_prompt_command177_bits, 1 );


/* ==============================================
 * Parsing rules
 */
/**
 * $ANTLR start sql_plus_command
 * SQLPLUSParser.g:30:1: sql_plus_command : ( SOLIDUS | whenever_command | exit_command | prompt_command | set_command ) ( SEMICOLON )? ;
 */
void
PLSQLParser_SQLPLUSParser::sql_plus_command()
{
        PLSQLParser_SQLPLUSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // SQLPLUSParser.g:31:5: ( ( SOLIDUS | whenever_command | exit_command | prompt_command | set_command ) ( SEMICOLON )? )
        // SQLPLUSParser.g:31:10: ( SOLIDUS | whenever_command | exit_command | prompt_command | set_command ) ( SEMICOLON )?
        {
            // SQLPLUSParser.g:31:10: ( SOLIDUS | whenever_command | exit_command | prompt_command | set_command )
            {
                int alt1=5;
                switch ( this->LA(1) )
                {
                case SOLIDUS:
                	{
                		alt1=1;
                	}
                    break;
                case REGULAR_ID:
                	{
                		switch ( this->LA(2) )
                		{
                		case EOF:
                		case LEFT_PAREN:
                		case PLSQL_RESERVED_LOCK:
                		case PROMPT:
                		case SEMICOLON:
                		case SOLIDUS:
                		case SQL92_RESERVED_ALTER:
                		case SQL92_RESERVED_CREATE:
                		case SQL92_RESERVED_DELETE:
                		case SQL92_RESERVED_DROP:
                		case SQL92_RESERVED_INSERT:
                		case SQL92_RESERVED_PROCEDURE:
                		case SQL92_RESERVED_SELECT:
                		case SQL92_RESERVED_UPDATE:
                		case SQL92_RESERVED_WITH:
                			{
                				alt1=3;
                			}
                		    break;
                		case REGULAR_ID:
                			{
                				{
                				    int LA1_5 = this->LA(3);
                				    if ( (LA1_5 == EOF || LA1_5 == DELIMITED_ID || LA1_5 == INTRODUCER || LA1_5 == LEFT_PAREN || LA1_5 == PLSQL_RESERVED_LOCK || LA1_5 == PROMPT || LA1_5 == SEMICOLON || LA1_5 == SOLIDUS || LA1_5 == SQL92_RESERVED_ALTER || LA1_5 == SQL92_RESERVED_CREATE || LA1_5 == SQL92_RESERVED_DELETE || LA1_5 == SQL92_RESERVED_DROP || LA1_5 == SQL92_RESERVED_INSERT || LA1_5 == SQL92_RESERVED_INTO || LA1_5 == SQL92_RESERVED_PROCEDURE || LA1_5 == SQL92_RESERVED_SELECT || LA1_5 == SQL92_RESERVED_UPDATE || LA1_5 == SQL92_RESERVED_WITH))
                				    {
                				        alt1=3;
                				    }
                				    else if ( (LA1_5 == REGULAR_ID))
                				    {
                				        {
                				            int LA1_6 = this->LA(4);
                				            if ( (LA1_6 == REGULAR_ID))
                				            {
                				                alt1=2;
                				            }
                				            else if ( ((equalsIgnoreCase(LT(1)->getText(), "EXIT"))))
                				            {
                				                alt1=3;
                				            }
                				            else if ( ((equalsIgnoreCase(LT(1)->getText(), "SET"))))
                				            {
                				                alt1=5;
                				            }
                				            else
                				            {
                				                if (this->get_backtracking()>0)
                				                {
                				                    this->set_failedflag( true );
                				                    return ;
                				                }


                				                ExceptionBaseType* ex = new ANTLR_Exception< PLSQLParser_SQLPLUSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                				                ex->set_decisionNum( 1 );
                				                ex->set_state( 6 );


                				                goto rulesql_plus_commandEx;

                				            }
                				        }
                				    }
                				    else if ( ((equalsIgnoreCase(LT(1)->getText(), "SET"))) && (LA1_5 == CHAR_STRING || LA1_5 == EXACT_NUM_LIT || LA1_5 == SQL92_RESERVED_ON))
                				    {
                				        alt1=5;
                				    }
                				    else
                				    {
                				        if (this->get_backtracking()>0)
                				        {
                				            this->set_failedflag( true );
                				            return ;
                				        }


                				        ExceptionBaseType* ex = new ANTLR_Exception< PLSQLParser_SQLPLUSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                				        ex->set_decisionNum( 1 );
                				        ex->set_state( 5 );


                				        goto rulesql_plus_commandEx;

                				    }
                				}
                			}
                		    break;

                		default:
                		    if (this->get_backtracking()>0)
                		    {
                		        this->set_failedflag( true );
                		        return ;
                		    }

                		    ExceptionBaseType* ex = new ANTLR_Exception< PLSQLParser_SQLPLUSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 1 );
                		    ex->set_state( 2 );


                		    goto rulesql_plus_commandEx;

                		}

                	}
                    break;
                case PROMPT:
                	{
                		alt1=4;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return ;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< PLSQLParser_SQLPLUSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 1 );
                    ex->set_state( 0 );


                    goto rulesql_plus_commandEx;

                }

                switch (alt1)
                {
            	case 1:
            	    // SQLPLUSParser.g:31:11: SOLIDUS
            	    {
            	         this->matchToken(SOLIDUS, &FOLLOW_SOLIDUS_in_sql_plus_command34);
            	        if  (this->hasException())
            	        {
            	            goto rulesql_plus_commandEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 2:
            	    // SQLPLUSParser.g:31:19: whenever_command
            	    {
            	        this->followPush(FOLLOW_whenever_command_in_sql_plus_command36);
            	        whenever_command();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesql_plus_commandEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 3:
            	    // SQLPLUSParser.g:31:36: exit_command
            	    {
            	        this->followPush(FOLLOW_exit_command_in_sql_plus_command38);
            	        exit_command();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesql_plus_commandEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 4:
            	    // SQLPLUSParser.g:31:49: prompt_command
            	    {
            	        this->followPush(FOLLOW_prompt_command_in_sql_plus_command40);
            	        prompt_command();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesql_plus_commandEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 5:
            	    // SQLPLUSParser.g:31:64: set_command
            	    {
            	        this->followPush(FOLLOW_set_command_in_sql_plus_command42);
            	        set_command();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulesql_plus_commandEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

            // SQLPLUSParser.g:31:77: ( SEMICOLON )?
            {
                int alt2=2;
                switch ( this->LA(1) )
                {
                    case SEMICOLON:
                    	{
                    		alt2=1;
                    	}
                        break;
                }

                switch (alt2)
                {
            	case 1:
            	    // SQLPLUSParser.g:31:77: SEMICOLON
            	    {
            	         this->matchToken(SEMICOLON, &FOLLOW_SEMICOLON_in_sql_plus_command45);
            	        if  (this->hasException())
            	        {
            	            goto rulesql_plus_commandEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto rulesql_plus_commandEx; /* Prevent compiler warnings */
    rulesql_plus_commandEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end sql_plus_command */

/**
 * $ANTLR start whenever_command
 * SQLPLUSParser.g:34:1: whenever_command : whenever_key ( sqlerror_key | oserror_key ) ( exit_key ( success_key | failure_key | warning_key ) ( commit_key | rollback_key ) | continue_key ( commit_key | rollback_key | none_key ) ) ;
 */
void
PLSQLParser_SQLPLUSParser::whenever_command()
{
        PLSQLParser_SQLPLUSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // SQLPLUSParser.g:35:5: ( whenever_key ( sqlerror_key | oserror_key ) ( exit_key ( success_key | failure_key | warning_key ) ( commit_key | rollback_key ) | continue_key ( commit_key | rollback_key | none_key ) ) )
        // SQLPLUSParser.g:35:10: whenever_key ( sqlerror_key | oserror_key ) ( exit_key ( success_key | failure_key | warning_key ) ( commit_key | rollback_key ) | continue_key ( commit_key | rollback_key | none_key ) )
        {
            this->followPush(FOLLOW_whenever_key_in_whenever_command66);
            m_gPLSQLParser->whenever_key();

            this->followPop();
            if  (this->hasException())
            {
                goto rulewhenever_commandEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            // SQLPLUSParser.g:35:23: ( sqlerror_key | oserror_key )
            {
                int alt3=2;
                switch ( this->LA(1) )
                {
                case REGULAR_ID:
                	{
                		{
                		    int LA3_1 = this->LA(2);
                		    if ( ((equalsIgnoreCase(LT(1)->getText(), "SQLERROR"))))
                		    {
                		        alt3=1;
                		    }
                		    else if ( ((equalsIgnoreCase(LT(1)->getText(), "OSERROR"))))
                		    {
                		        alt3=2;
                		    }
                		    else
                		    {
                		        if (this->get_backtracking()>0)
                		        {
                		            this->set_failedflag( true );
                		            return ;
                		        }


                		        ExceptionBaseType* ex = new ANTLR_Exception< PLSQLParser_SQLPLUSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		        ex->set_decisionNum( 3 );
                		        ex->set_state( 1 );


                		        goto rulewhenever_commandEx;

                		    }
                		}
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return ;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< PLSQLParser_SQLPLUSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 3 );
                    ex->set_state( 0 );


                    goto rulewhenever_commandEx;

                }

                switch (alt3)
                {
            	case 1:
            	    // SQLPLUSParser.g:35:24: sqlerror_key
            	    {
            	        this->followPush(FOLLOW_sqlerror_key_in_whenever_command69);
            	        m_gPLSQLParser->sqlerror_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulewhenever_commandEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 2:
            	    // SQLPLUSParser.g:35:37: oserror_key
            	    {
            	        this->followPush(FOLLOW_oserror_key_in_whenever_command71);
            	        m_gPLSQLParser->oserror_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulewhenever_commandEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

            // SQLPLUSParser.g:35:50: ( exit_key ( success_key | failure_key | warning_key ) ( commit_key | rollback_key ) | continue_key ( commit_key | rollback_key | none_key ) )
            {
                int alt7=2;
                switch ( this->LA(1) )
                {
                case REGULAR_ID:
                	{
                		switch ( this->LA(2) )
                		{
                		case REGULAR_ID:
                			{
                				{
                				    int LA7_2 = this->LA(3);
                				    if ( ((equalsIgnoreCase(LT(1)->getText(), "CONTINUE"))) && (LA7_2 == EOF || LA7_2 == LEFT_PAREN || LA7_2 == PLSQL_RESERVED_LOCK || LA7_2 == PROMPT || LA7_2 == SEMICOLON || LA7_2 == SOLIDUS || LA7_2 == SQL92_RESERVED_ALTER || LA7_2 == SQL92_RESERVED_CREATE || LA7_2 == SQL92_RESERVED_DELETE || LA7_2 == SQL92_RESERVED_DROP || LA7_2 == SQL92_RESERVED_INSERT || LA7_2 == SQL92_RESERVED_PROCEDURE || LA7_2 == SQL92_RESERVED_SELECT || LA7_2 == SQL92_RESERVED_UPDATE || LA7_2 == SQL92_RESERVED_WITH))
                				    {
                				        alt7=2;
                				    }
                				    else if ( (LA7_2 == REGULAR_ID))
                				    {
                				        {
                				            int LA7_4 = this->LA(4);
                				            if ( ((equalsIgnoreCase(LT(1)->getText(), "EXIT"))))
                				            {
                				                alt7=1;
                				            }
                				            else if ( ((equalsIgnoreCase(LT(1)->getText(), "CONTINUE"))))
                				            {
                				                alt7=2;
                				            }
                				            else
                				            {
                				                if (this->get_backtracking()>0)
                				                {
                				                    this->set_failedflag( true );
                				                    return ;
                				                }


                				                ExceptionBaseType* ex = new ANTLR_Exception< PLSQLParser_SQLPLUSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                				                ex->set_decisionNum( 7 );
                				                ex->set_state( 4 );


                				                goto rulewhenever_commandEx;

                				            }
                				        }
                				    }
                				    else
                				    {
                				        if (this->get_backtracking()>0)
                				        {
                				            this->set_failedflag( true );
                				            return ;
                				        }


                				        ExceptionBaseType* ex = new ANTLR_Exception< PLSQLParser_SQLPLUSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                				        ex->set_decisionNum( 7 );
                				        ex->set_state( 2 );


                				        goto rulewhenever_commandEx;

                				    }
                				}
                			}
                		    break;

                		default:
                		    if (this->get_backtracking()>0)
                		    {
                		        this->set_failedflag( true );
                		        return ;
                		    }

                		    ExceptionBaseType* ex = new ANTLR_Exception< PLSQLParser_SQLPLUSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		    ex->set_decisionNum( 7 );
                		    ex->set_state( 1 );


                		    goto rulewhenever_commandEx;

                		}

                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return ;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< PLSQLParser_SQLPLUSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 7 );
                    ex->set_state( 0 );


                    goto rulewhenever_commandEx;

                }

                switch (alt7)
                {
            	case 1:
            	    // SQLPLUSParser.g:35:51: exit_key ( success_key | failure_key | warning_key ) ( commit_key | rollback_key )
            	    {
            	        this->followPush(FOLLOW_exit_key_in_whenever_command75);
            	        m_gPLSQLParser->exit_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulewhenever_commandEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        // SQLPLUSParser.g:35:60: ( success_key | failure_key | warning_key )
            	        {
            	            int alt4=3;
            	            switch ( this->LA(1) )
            	            {
            	            case REGULAR_ID:
            	            	{
            	            		{
            	            		    int LA4_1 = this->LA(2);
            	            		    if ( ((equalsIgnoreCase(LT(1)->getText(), "SUCCESS"))))
            	            		    {
            	            		        alt4=1;
            	            		    }
            	            		    else if ( ((equalsIgnoreCase(LT(1)->getText(), "FAILURE"))))
            	            		    {
            	            		        alt4=2;
            	            		    }
            	            		    else if ( ((equalsIgnoreCase(LT(1)->getText(), "WARNING"))))
            	            		    {
            	            		        alt4=3;
            	            		    }
            	            		    else
            	            		    {
            	            		        if (this->get_backtracking()>0)
            	            		        {
            	            		            this->set_failedflag( true );
            	            		            return ;
            	            		        }


            	            		        ExceptionBaseType* ex = new ANTLR_Exception< PLSQLParser_SQLPLUSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	            		        ex->set_decisionNum( 4 );
            	            		        ex->set_state( 1 );


            	            		        goto rulewhenever_commandEx;

            	            		    }
            	            		}
            	            	}
            	                break;

            	            default:
            	                if (this->get_backtracking()>0)
            	                {
            	                    this->set_failedflag( true );
            	                    return ;
            	                }

            	                ExceptionBaseType* ex = new ANTLR_Exception< PLSQLParser_SQLPLUSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                ex->set_decisionNum( 4 );
            	                ex->set_state( 0 );


            	                goto rulewhenever_commandEx;

            	            }

            	            switch (alt4)
            	            {
            	        	case 1:
            	        	    // SQLPLUSParser.g:35:61: success_key
            	        	    {
            	        	        this->followPush(FOLLOW_success_key_in_whenever_command78);
            	        	        m_gPLSQLParser->success_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulewhenever_commandEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return ;
            	        	        }


            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // SQLPLUSParser.g:35:73: failure_key
            	        	    {
            	        	        this->followPush(FOLLOW_failure_key_in_whenever_command80);
            	        	        m_gPLSQLParser->failure_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulewhenever_commandEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return ;
            	        	        }


            	        	    }
            	        	    break;
            	        	case 3:
            	        	    // SQLPLUSParser.g:35:85: warning_key
            	        	    {
            	        	        this->followPush(FOLLOW_warning_key_in_whenever_command82);
            	        	        m_gPLSQLParser->warning_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulewhenever_commandEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return ;
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	        // SQLPLUSParser.g:35:98: ( commit_key | rollback_key )
            	        {
            	            int alt5=2;
            	            {
            	                int LA5_0 = this->LA(1);
            	                if ( ((((equalsIgnoreCase(LT(1)->getText(), "COMMIT")))||((equalsIgnoreCase(LT(1)->getText(), "ROLLBACK"))))) && (LA5_0 == REGULAR_ID))
            	                {
            	                    {
            	                        int LA5_1 = this->LA(2);
            	                        if ( ((equalsIgnoreCase(LT(1)->getText(), "COMMIT"))))
            	                        {
            	                            alt5=1;
            	                        }
            	                        else if ( ((equalsIgnoreCase(LT(1)->getText(), "ROLLBACK"))))
            	                        {
            	                            alt5=2;
            	                        }
            	                        else
            	                        {
            	                            if (this->get_backtracking()>0)
            	                            {
            	                                this->set_failedflag( true );
            	                                return ;
            	                            }


            	                            ExceptionBaseType* ex = new ANTLR_Exception< PLSQLParser_SQLPLUSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                            ex->set_decisionNum( 5 );
            	                            ex->set_state( 1 );


            	                            goto rulewhenever_commandEx;

            	                        }
            	                    }
            	                }
            	                else
            	                {
            	                    if (this->get_backtracking()>0)
            	                    {
            	                        this->set_failedflag( true );
            	                        return ;
            	                    }


            	                    ExceptionBaseType* ex = new ANTLR_Exception< PLSQLParser_SQLPLUSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                    ex->set_decisionNum( 5 );
            	                    ex->set_state( 0 );


            	                    goto rulewhenever_commandEx;

            	                }
            	            }
            	            switch (alt5)
            	            {
            	        	case 1:
            	        	    // SQLPLUSParser.g:35:99: commit_key
            	        	    {
            	        	        this->followPush(FOLLOW_commit_key_in_whenever_command86);
            	        	        m_gPLSQLParser->commit_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulewhenever_commandEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return ;
            	        	        }


            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // SQLPLUSParser.g:35:110: rollback_key
            	        	    {
            	        	        this->followPush(FOLLOW_rollback_key_in_whenever_command88);
            	        	        m_gPLSQLParser->rollback_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulewhenever_commandEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return ;
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;
            	case 2:
            	    // SQLPLUSParser.g:35:126: continue_key ( commit_key | rollback_key | none_key )
            	    {
            	        this->followPush(FOLLOW_continue_key_in_whenever_command93);
            	        m_gPLSQLParser->continue_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto rulewhenever_commandEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	        // SQLPLUSParser.g:35:139: ( commit_key | rollback_key | none_key )
            	        {
            	            int alt6=3;
            	            {
            	                int LA6_0 = this->LA(1);
            	                if ( ((((equalsIgnoreCase(LT(1)->getText(), "COMMIT")))||((equalsIgnoreCase(LT(1)->getText(), "NONE")))||((equalsIgnoreCase(LT(1)->getText(), "ROLLBACK"))))) && (LA6_0 == REGULAR_ID))
            	                {
            	                    {
            	                        int LA6_1 = this->LA(2);
            	                        if ( ((equalsIgnoreCase(LT(1)->getText(), "COMMIT"))))
            	                        {
            	                            alt6=1;
            	                        }
            	                        else if ( ((equalsIgnoreCase(LT(1)->getText(), "ROLLBACK"))))
            	                        {
            	                            alt6=2;
            	                        }
            	                        else if ( ((equalsIgnoreCase(LT(1)->getText(), "NONE"))))
            	                        {
            	                            alt6=3;
            	                        }
            	                        else
            	                        {
            	                            if (this->get_backtracking()>0)
            	                            {
            	                                this->set_failedflag( true );
            	                                return ;
            	                            }


            	                            ExceptionBaseType* ex = new ANTLR_Exception< PLSQLParser_SQLPLUSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                            ex->set_decisionNum( 6 );
            	                            ex->set_state( 1 );


            	                            goto rulewhenever_commandEx;

            	                        }
            	                    }
            	                }
            	                else
            	                {
            	                    if (this->get_backtracking()>0)
            	                    {
            	                        this->set_failedflag( true );
            	                        return ;
            	                    }


            	                    ExceptionBaseType* ex = new ANTLR_Exception< PLSQLParser_SQLPLUSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
            	                    ex->set_decisionNum( 6 );
            	                    ex->set_state( 0 );


            	                    goto rulewhenever_commandEx;

            	                }
            	            }
            	            switch (alt6)
            	            {
            	        	case 1:
            	        	    // SQLPLUSParser.g:35:140: commit_key
            	        	    {
            	        	        this->followPush(FOLLOW_commit_key_in_whenever_command96);
            	        	        m_gPLSQLParser->commit_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulewhenever_commandEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return ;
            	        	        }


            	        	    }
            	        	    break;
            	        	case 2:
            	        	    // SQLPLUSParser.g:35:151: rollback_key
            	        	    {
            	        	        this->followPush(FOLLOW_rollback_key_in_whenever_command98);
            	        	        m_gPLSQLParser->rollback_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulewhenever_commandEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return ;
            	        	        }


            	        	    }
            	        	    break;
            	        	case 3:
            	        	    // SQLPLUSParser.g:35:164: none_key
            	        	    {
            	        	        this->followPush(FOLLOW_none_key_in_whenever_command100);
            	        	        m_gPLSQLParser->none_key();

            	        	        this->followPop();
            	        	        if  (this->hasException())
            	        	        {
            	        	            goto rulewhenever_commandEx;
            	        	        }
            	        	        if (this->hasFailed())
            	        	        {
            	        	            return ;
            	        	        }


            	        	    }
            	        	    break;

            	            }
            	        }

            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto rulewhenever_commandEx; /* Prevent compiler warnings */
    rulewhenever_commandEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end whenever_command */

/**
 * $ANTLR start set_command
 * SQLPLUSParser.g:38:1: set_command : set_key REGULAR_ID ( CHAR_STRING | on_key | off_key | EXACT_NUM_LIT | REGULAR_ID ) ;
 */
void
PLSQLParser_SQLPLUSParser::set_command()
{
        PLSQLParser_SQLPLUSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // SQLPLUSParser.g:39:5: ( set_key REGULAR_ID ( CHAR_STRING | on_key | off_key | EXACT_NUM_LIT | REGULAR_ID ) )
        // SQLPLUSParser.g:39:10: set_key REGULAR_ID ( CHAR_STRING | on_key | off_key | EXACT_NUM_LIT | REGULAR_ID )
        {
            this->followPush(FOLLOW_set_key_in_set_command122);
            m_gPLSQLParser->set_key();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleset_commandEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


             this->matchToken(REGULAR_ID, &FOLLOW_REGULAR_ID_in_set_command124);
            if  (this->hasException())
            {
                goto ruleset_commandEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


            // SQLPLUSParser.g:39:29: ( CHAR_STRING | on_key | off_key | EXACT_NUM_LIT | REGULAR_ID )
            {
                int alt8=5;
                switch ( this->LA(1) )
                {
                case CHAR_STRING:
                	{
                		alt8=1;
                	}
                    break;
                case SQL92_RESERVED_ON:
                	{
                		alt8=2;
                	}
                    break;
                case REGULAR_ID:
                	{
                		{
                		    int LA8_3 = this->LA(2);
                		    if ( ((equalsIgnoreCase(LT(1)->getText(), "OFF"))))
                		    {
                		        alt8=3;
                		    }
                		    else if ( (true))
                		    {
                		        alt8=5;
                		    }
                		    else
                		    {
                		        if (this->get_backtracking()>0)
                		        {
                		            this->set_failedflag( true );
                		            return ;
                		        }


                		        ExceptionBaseType* ex = new ANTLR_Exception< PLSQLParser_SQLPLUSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                		        ex->set_decisionNum( 8 );
                		        ex->set_state( 3 );


                		        goto ruleset_commandEx;

                		    }
                		}
                	}
                    break;
                case EXACT_NUM_LIT:
                	{
                		alt8=4;
                	}
                    break;

                default:
                    if (this->get_backtracking()>0)
                    {
                        this->set_failedflag( true );
                        return ;
                    }

                    ExceptionBaseType* ex = new ANTLR_Exception< PLSQLParser_SQLPLUSParserImplTraits, NO_VIABLE_ALT_EXCEPTION, StreamType>( this->get_rec(), "" );
                    ex->set_decisionNum( 8 );
                    ex->set_state( 0 );


                    goto ruleset_commandEx;

                }

                switch (alt8)
                {
            	case 1:
            	    // SQLPLUSParser.g:39:30: CHAR_STRING
            	    {
            	         this->matchToken(CHAR_STRING, &FOLLOW_CHAR_STRING_in_set_command127);
            	        if  (this->hasException())
            	        {
            	            goto ruleset_commandEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 2:
            	    // SQLPLUSParser.g:39:42: on_key
            	    {
            	        this->followPush(FOLLOW_on_key_in_set_command129);
            	        m_gPLSQLParser->on_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleset_commandEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 3:
            	    // SQLPLUSParser.g:39:49: off_key
            	    {
            	        this->followPush(FOLLOW_off_key_in_set_command131);
            	        m_gPLSQLParser->off_key();

            	        this->followPop();
            	        if  (this->hasException())
            	        {
            	            goto ruleset_commandEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 4:
            	    // SQLPLUSParser.g:39:57: EXACT_NUM_LIT
            	    {
            	         this->matchToken(EXACT_NUM_LIT, &FOLLOW_EXACT_NUM_LIT_in_set_command133);
            	        if  (this->hasException())
            	        {
            	            goto ruleset_commandEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;
            	case 5:
            	    // SQLPLUSParser.g:39:71: REGULAR_ID
            	    {
            	         this->matchToken(REGULAR_ID, &FOLLOW_REGULAR_ID_in_set_command135);
            	        if  (this->hasException())
            	        {
            	            goto ruleset_commandEx;
            	        }
            	        if (this->hasFailed())
            	        {
            	            return ;
            	        }


            	    }
            	    break;

                }
            }

        }

    }
    // This is where rules clean up and exit
    //
    goto ruleset_commandEx; /* Prevent compiler warnings */
    ruleset_commandEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end set_command */

/**
 * $ANTLR start exit_command
 * SQLPLUSParser.g:42:1: exit_command : exit_key ;
 */
void
PLSQLParser_SQLPLUSParser::exit_command()
{
        PLSQLParser_SQLPLUSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // SQLPLUSParser.g:43:5: ( exit_key )
        // SQLPLUSParser.g:43:10: exit_key
        {
            this->followPush(FOLLOW_exit_key_in_exit_command156);
            m_gPLSQLParser->exit_key();

            this->followPop();
            if  (this->hasException())
            {
                goto ruleexit_commandEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleexit_commandEx; /* Prevent compiler warnings */
    ruleexit_commandEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end exit_command */

/**
 * $ANTLR start prompt_command
 * SQLPLUSParser.g:46:1: prompt_command : PROMPT ;
 */
void
PLSQLParser_SQLPLUSParser::prompt_command()
{
        PLSQLParser_SQLPLUSParserImplTraits::RuleReturnValueType _antlr_rule_exit(this);
      

    /* Initialize rule variables
     */


 
    {
        // SQLPLUSParser.g:47:5: ( PROMPT )
        // SQLPLUSParser.g:47:10: PROMPT
        {
             this->matchToken(PROMPT, &FOLLOW_PROMPT_in_prompt_command177);
            if  (this->hasException())
            {
                goto ruleprompt_commandEx;
            }
            if (this->hasFailed())
            {
                return ;
            }


        }

    }
    // This is where rules clean up and exit
    //
    goto ruleprompt_commandEx; /* Prevent compiler warnings */
    ruleprompt_commandEx: ;


    	if (this->hasException())
        {
            this->preporterror();
            this->precover();
        }
    return ;
}
/* $ANTLR end prompt_command */
/* End of parsing rules
 * ==============================================
 */

/* ==============================================
 * Syntactic predicates
 */
/* End of syntactic predicates
 * ==============================================
 */

}

/* End of code
 * =============================================================================
 */
